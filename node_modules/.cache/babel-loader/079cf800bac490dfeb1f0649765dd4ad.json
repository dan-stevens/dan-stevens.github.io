{"ast":null,"code":"var _jsxFileName = \"/Dan/DansCode/dan-stevens.github.io/src/components/Header/BoxTwo/boxTwo.js\";\n//This is the parent, it has a state\nimport React from 'react';\nimport { ButtonTwo } from '../../Button/buttonTwo';\nexport class BoxTwo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      clicks: 0 //Set the inital state\n      //Bind the function below to this current iteration of the module\n\n    };\n    this.updateBoxTwo = this.updateBoxTwo.bind(this); //console.log(this.state.clicks);\n  }\n\n  componentWillReceiveProps(nextProps) {} //console.log('componentWillRecieveProps: component will recive some new prop(s)');\n  // shouldComponentUpdate(nextProps, nextState) {\n  // \tconsole.log('totalClicks before ' + this.state.clicks);\n  // \tconsole.log('ShouldComponentUpdate: Before re-rendering (can be cancelled by returning false)');\n  // \treturn true;\n  // }\n  // componentWillUpdate(nextProps, nextState) {\n  // \tconsole.log(nextState.clicks + ' componentWillUpdate: Before re-rendering');\n  // }\n  // componentDidUpdate(prevProps, prevState) {\n  // \tconsole.log(prevState.clicks + ' componentDidUpdate: after components updated in the DOM');\n  // \tconsole.log('after ' + this.state.clicks);\n  // }\n  //Here is the function that we will pass the the child to be called on some sort of event\n  //It should update the state somehow...\n\n\n  updateBoxTwo() {\n    const totalClicks = this.state.clicks;\n    this.setState({\n      clicks: totalClicks + 1\n    });\n  } //Time to render the child and pass the function above to it\n\n\n  render() {\n    return React.createElement(ButtonTwo, {\n      onClick: this.updateBoxTwo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    });\n  }\n\n}","map":{"version":3,"sources":["/Dan/DansCode/dan-stevens.github.io/src/components/Header/BoxTwo/boxTwo.js"],"names":["React","ButtonTwo","BoxTwo","Component","constructor","props","state","clicks","updateBoxTwo","bind","componentWillReceiveProps","nextProps","totalClicks","setState","render"],"mappings":";AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,wBAA1B;AAEA,OAAO,MAAMC,MAAN,SAAqBF,KAAK,CAACG,SAA3B,CAAqC;AAC3CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACZC,MAAAA,MAAM,EAAG,CADG,CAGb;AACA;;AAJa,KAAb;AAKA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB,CARkB,CASlB;AACA;;AAEAC,EAAAA,yBAAyB,CAACC,SAAD,EAAY,CAGrC,CAHyB,CACzB;AAKD;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;;;AACAH,EAAAA,YAAY,GAAG;AAEd,UAAMI,WAAW,GAAG,KAAKN,KAAL,CAAWC,MAA/B;AAEA,SAAKM,QAAL,CAAc;AACbN,MAAAA,MAAM,EAAGK,WAAW,GAAG;AADV,KAAd;AAIA,GA9C0C,CAgD3C;;;AACAE,EAAAA,MAAM,GAAG;AACR,WACC,oBAAC,SAAD;AAAW,MAAA,OAAO,EAAE,KAAKN,YAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD;AAGA;;AArD0C","sourcesContent":["//This is the parent, it has a state\nimport React from 'react';\nimport { ButtonTwo } from '../../Button/buttonTwo';\n\nexport class BoxTwo extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tclicks : 0\n\t\t}\n\t\t//Set the inital state\n\t\t//Bind the function below to this current iteration of the module\n\t\tthis.updateBoxTwo = this.updateBoxTwo.bind(this);\n\t\t//console.log(this.state.clicks);\n\t}\n\n\t\tcomponentWillReceiveProps(nextProps) {\n\t\t//console.log('componentWillRecieveProps: component will recive some new prop(s)');\n\n\t}\n\n\n\t// shouldComponentUpdate(nextProps, nextState) {\n\t// \tconsole.log('totalClicks before ' + this.state.clicks);\n\t// \tconsole.log('ShouldComponentUpdate: Before re-rendering (can be cancelled by returning false)');\n\t// \treturn true;\n\t// }\n\n\n\t// componentWillUpdate(nextProps, nextState) {\n\t// \tconsole.log(nextState.clicks + ' componentWillUpdate: Before re-rendering');\n\t// }\n\n\n\t// componentDidUpdate(prevProps, prevState) {\n\t// \tconsole.log(prevState.clicks + ' componentDidUpdate: after components updated in the DOM');\n\t// \tconsole.log('after ' + this.state.clicks);\n\t// }\n\n\t//Here is the function that we will pass the the child to be called on some sort of event\n\t//It should update the state somehow...\n\tupdateBoxTwo() {\n\t\t\n\t\tconst totalClicks = this.state.clicks;\n\t\t\n\t\tthis.setState({\n\t\t\tclicks : totalClicks + 1\n\t\t});\n\t\t\n\t}\n\n\t//Time to render the child and pass the function above to it\n\trender() {\n\t\treturn (\n\t\t\t<ButtonTwo onClick={this.updateBoxTwo} />\n\t\t\t);\n\t}\n\n}"]},"metadata":{},"sourceType":"module"}