{"ast":null,"code":"var _jsxFileName = \"/Dan/DansCode/dan-stevens.github.io/src/components/Gizmos/gizmo.js\";\nimport React from 'react';\nimport { Frame } from './frame';\nexport class Gizmo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.monsterDOMRef = React.createRef(); // Coordinates in DOM used for animation\n\n    this.state = {\n      displayFrame: true,\n      preMountEvents: ''\n    };\n    this.componentLifeCycleEvent = this.componentLifeCycleEvent.bind(this);\n  }\n\n  toggleColor() {\n    const possibleBlockColors = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'];\n    const randomColor = Math.floor(Math.random() * possibleBlockColors.length);\n    this.setState({\n      color: possibleBlockColors[randomColor]\n    });\n  }\n\n  toggleWidth() {\n    this.setState({\n      width: this.state.width === '200px' ? '300px' : '200px'\n    });\n  }\n\n  toggleCorners() {\n    this.setState({\n      borderRadius: this.state.borderRadius === '0px' ? '50px' : '0px'\n    });\n  }\n\n  monsterSelected() {\n    this.props.onFilterOut(this.props.number, this.monsterDOMRef.current.offsetTop);\n  }\n\n  componentLifeCycleEvent(lifeCycleEvent, prevProps, prevState) {\n    document.getElementById('gizmo-updates-screen').prepend(lifeCycleEvent);\n  }\n\n  componentWillMount() {\n    this.setState({\n      preMountEvents: 'componentWillMount called'\n    });\n  }\n\n  componentDidMount() {\n    this.componentLifeCycleEvent('componentDidMount called');\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState !== this.state) {\n      this.componentLifeCycleEvent('componentDidUpdate called', prevProps.number, prevState);\n    }\n\n    if (prevProps.number !== this.props.number) {}\n  }\n\n  componentWillUnmount() {\n    this.props.onCreateMonster(this.state, this.props);\n  }\n\n  render() {\n    let frame;\n\n    if (this.state.displayFrame) {\n      frame = React.createElement(Frame, {\n        currentFrameType: this.props.currentFrameType,\n        cycleFrameType: this.cycleFrameType,\n        currentFrameOption: this.state.currentFrameOption,\n        resetFrameOption: this.resetFrameOption,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: \"gizmo\",\n      id: 'gizmoId',\n      ref: this.monsterDOMRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, frame);\n  }\n\n}","map":{"version":3,"sources":["/Dan/DansCode/dan-stevens.github.io/src/components/Gizmos/gizmo.js"],"names":["React","Frame","Gizmo","Component","constructor","props","monsterDOMRef","createRef","state","displayFrame","preMountEvents","componentLifeCycleEvent","bind","toggleColor","possibleBlockColors","randomColor","Math","floor","random","length","setState","color","toggleWidth","width","toggleCorners","borderRadius","monsterSelected","onFilterOut","number","current","offsetTop","lifeCycleEvent","prevProps","prevState","document","getElementById","prepend","componentWillMount","componentDidMount","componentDidUpdate","componentWillUnmount","onCreateMonster","render","frame","currentFrameType","cycleFrameType","currentFrameOption","resetFrameOption"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Frame} from './frame';\n\nexport class Gizmo extends React.Component {\n  constructor(props) {\n    super(props);    \n    this.monsterDOMRef = React.createRef(); // Coordinates in DOM used for animation\n    this.state = {\n      displayFrame: true,      \n      preMountEvents: ''\n    };\n    this.componentLifeCycleEvent = this.componentLifeCycleEvent.bind(this);\n  }\n\n  toggleColor() {\n  \tconst possibleBlockColors = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'];\n  \tconst randomColor = Math.floor(Math.random() * possibleBlockColors.length);\n    this.setState({\n      color: possibleBlockColors[randomColor]\n    });\n  }\n\n  toggleWidth() {\n\tthis.setState({\n\t\twidth: this.state.width === '200px' ? '300px' : '200px'\n\t});\n  }\n\n  toggleCorners() {\n\tthis.setState({\n\t\tborderRadius: this.state.borderRadius === '0px' ? '50px' : '0px'\n\t});\n  }\n\n  monsterSelected() {\n    this.props.onFilterOut(this.props.number, this.monsterDOMRef.current.offsetTop);\n  }\n\n  componentLifeCycleEvent(lifeCycleEvent, prevProps, prevState) {\n    document.getElementById('gizmo-updates-screen').prepend(lifeCycleEvent);\n  }\n\n  componentWillMount() {\n\tthis.setState({\n\t\tpreMountEvents: 'componentWillMount called'\n \t});\n  }\n\n  componentDidMount() {\n    this.componentLifeCycleEvent('componentDidMount called');\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n  \tif (prevState !== this.state) {\n  \t\tthis.componentLifeCycleEvent('componentDidUpdate called', prevProps.number, prevState);\n  \t}\n  \tif (prevProps.number !== this.props.number) {\n  \t}\n  }\n\n  componentWillUnmount() {\n    this.props.onCreateMonster(this.state, this.props);\n  }\n\n  render() {\n\n    let frame;\n\n     if (this.state.displayFrame) {\n      frame = <Frame currentFrameType={this.props.currentFrameType} cycleFrameType={this.cycleFrameType} currentFrameOption={this.state.currentFrameOption} resetFrameOption={this.resetFrameOption} />;\n    }\n\n\treturn (    \n\t  <div className='gizmo' id={'gizmoId'} ref={this.monsterDOMRef} >\n      {frame}\n    </div>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}