{"ast":null,"code":"// Set of animations that create a new gizmo and set it down\nexport const craneOffScreen = animate => {\n  const element = document.getElementById('crane');\n  return cssTransitionToPromise(animate, element, 'margin-left', '-60%');\n};\nexport const craneIntoScreen = animate => {\n  const element = document.getElementById('crane');\n  return cssTransitionToPromise(animate, element, 'margin-left', '20%');\n};\nexport const gizmoIntoScreen = animate => {\n  const element = document.getElementById('gizmoId-' + animate.monsterNumber);\n  return cssTransitionToPromise(animate, element, 'left', '0%');\n};\nexport const craneClawDrop = animate => {\n  const element = document.getElementById('crane-claw');\n  return cssTransitionToPromise(animate, element, 'background-color', 'green');\n};\nexport const gizmoLower = animate => {\n  console.log(animate);\n  const element = document.getElementById('gizmoId-' + animate.monsterNumber);\n  return cssTransitionToPromise(animate, element, 'bottom', animate.monsterOffsetTop + 'px');\n};\nexport const gizmoSpin = animate => {\n  const element = document.getElementById('gizmoId-' + animate.monsterNumber);\n  return cssTransitionToPromise(animate, element, 'transform', 'rotate(10deg)');\n};\nexport const gizmoFlatten = animate => {\n  const element = document.getElementById('gizmoId-' + animate.monsterNumber);\n  return cssTransitionToPromise(animate, element, 'transform', 'rotate(0deg)');\n}; // Set of animations that pick up a gizmo, move it to the converter, drop it, and reset.\n\nexport const craneToPickup = animate => {\n  const element = document.getElementById('crane');\n  return cssTransitionToPromise(animate, element, 'margin-left', '50%');\n};\nexport const craneClawLower = animate => {\n  console.log(animate);\n  const element = document.getElementById('crane-claw');\n  return cssTransitionToPromise(animate, element, 'top', animate.monsterOffsetTop + 'px');\n};\nexport const craneClawGrab = animate => {\n  const element = document.getElementById('crane-claw');\n  return cssTransitionToPromise(animate, element, 'background-color', 'red');\n};\nexport const craneClawPickup = animate => {\n  const element = document.getElementById('crane-claw');\n  return cssTransitionToPromise(animate, element, 'top', '0');\n};\nexport const monsterPickup = animate => {\n  const element = document.getElementById('gizmoId-' + animate.monsterNumber);\n  return cssTransitionToPromise(animate, element, 'top', -animate.monsterOffsetTop + 'px');\n};\nexport const craneToDrop = animate => {\n  const element = document.getElementById('crane');\n  return cssTransitionToPromise(animate, element, 'margin-left', '80%');\n};\nexport const monsterToDrop = animate => {\n  const element = document.getElementById('gizmoId-' + animate.monsterNumber);\n  return cssTransitionToPromise(animate, element, 'left', '50%');\n}; //craneClawDrop\n\nexport const monsterDrop = animate => {\n  const element = document.getElementById('gizmoId-' + animate.monsterNumber);\n  return cssTransitionToPromise(animate, element, 'top', '100px');\n}; //gizmoSpin\n\nexport const craneReset = animate => {\n  const element = document.getElementById('crane');\n  return cssTransitionToPromise(animate, element, 'margin-left', 0);\n}; // Add / remove transition event listeners\n\nconst cssTransitionToPromise = (animate, element, property, value) => {\n  return new Promise(resolve => {\n    element.style[property] = value;\n\n    const transitionEnded = e => {\n      if (e.propertyName !== property) {\n        return; //Wrong transition\n      } else {\n        element.removeEventListener('transitionend', transitionEnded);\n        resolve(animate);\n      }\n    };\n\n    element.addEventListener('transitionend', transitionEnded);\n  });\n};","map":{"version":3,"sources":["/Dan/DansCode/dan-stevens.github.io/src/components/Gizmos/gizmoAnimations.js"],"names":["craneOffScreen","animate","element","document","getElementById","cssTransitionToPromise","craneIntoScreen","gizmoIntoScreen","monsterNumber","craneClawDrop","gizmoLower","console","log","monsterOffsetTop","gizmoSpin","gizmoFlatten","craneToPickup","craneClawLower","craneClawGrab","craneClawPickup","monsterPickup","craneToDrop","monsterToDrop","monsterDrop","craneReset","property","value","Promise","resolve","style","transitionEnded","e","propertyName","removeEventListener","addEventListener"],"mappings":"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","sourcesContent":["// Set of animations that create a new gizmo and set it down\nexport const craneOffScreen = (animate) => {\n  const element = document.getElementById('crane');\n  return (cssTransitionToPromise(animate, element, 'margin-left', '-60%'));\n}\n\nexport const craneIntoScreen = (animate) => {\n  const element = document.getElementById('crane');\n  return (cssTransitionToPromise(animate, element, 'margin-left', '20%'));\n}\n\nexport const gizmoIntoScreen = (animate) => {\n  const element = document.getElementById('gizmoId-' + animate.monsterNumber);\n  return (cssTransitionToPromise(animate, element, 'left', '0%'));\n}\n\nexport const craneClawDrop = (animate) => {\n  const element = document.getElementById('crane-claw');\n   return (cssTransitionToPromise(animate, element, 'background-color', 'green'))\n}\n\nexport const gizmoLower = (animate) => {\n  console.log(animate);\n  const element = document.getElementById('gizmoId-' + animate.monsterNumber);\n  return (cssTransitionToPromise(animate, element, 'bottom', animate.monsterOffsetTop + 'px'));\n}\n\nexport const gizmoSpin = (animate) => {\n  const element = document.getElementById('gizmoId-' + animate.monsterNumber);\n   return (cssTransitionToPromise(animate, element, 'transform', 'rotate(10deg)'))\n}\n\nexport const gizmoFlatten = (animate) => {\n  const element = document.getElementById('gizmoId-' + animate.monsterNumber);\n   return (cssTransitionToPromise(animate, element, 'transform', 'rotate(0deg)'))\n}\n\n\n\n// Set of animations that pick up a gizmo, move it to the converter, drop it, and reset.\nexport const craneToPickup = (animate) => {\n  const element = document.getElementById('crane');\n  return (cssTransitionToPromise(animate, element, 'margin-left', '50%'))\n}\n\nexport const craneClawLower = (animate) => {\n  console.log(animate);\n  const element = document.getElementById('crane-claw');\n   return (cssTransitionToPromise(animate, element, 'top', animate.monsterOffsetTop + 'px'))\n}\n\nexport const craneClawGrab = (animate) => {\n  const element = document.getElementById('crane-claw');\n   return (cssTransitionToPromise(animate, element, 'background-color', 'red'))\n}\n\nexport const craneClawPickup = (animate) => {\n\tconst element = document.getElementById('crane-claw');\n   return (cssTransitionToPromise(animate, element, 'top', '0'))\n}\n\nexport const monsterPickup = (animate) => {\n\tconst element = document.getElementById('gizmoId-' + animate.monsterNumber);\n   return (cssTransitionToPromise(animate, element, 'top', - animate.monsterOffsetTop + 'px'))\n}\n\nexport const craneToDrop = (animate) => {\n\tconst element = document.getElementById('crane');\n   return (cssTransitionToPromise(animate, element, 'margin-left', '80%'))\n}\n\nexport const monsterToDrop = (animate) => {\n\tconst element = document.getElementById('gizmoId-' + animate.monsterNumber);\n   return (cssTransitionToPromise(animate, element, 'left', '50%'))\n}\n\n//craneClawDrop\n\nexport const monsterDrop = (animate) => {\n\tconst element = document.getElementById('gizmoId-' + animate.monsterNumber);\n   return (cssTransitionToPromise(animate, element, 'top', '100px'))\n}\n\n//gizmoSpin\n\nexport const craneReset = (animate) => {\n  const element = document.getElementById('crane');\n  return (cssTransitionToPromise(animate, element, 'margin-left', 0))\n}\n\n// Add / remove transition event listeners\nconst cssTransitionToPromise = (animate, element, property, value) => {\nreturn (\n      new Promise(resolve => {\n        element.style[property] = value;\n        const transitionEnded = e => {\n        if (e.propertyName !== property) {\n        return; //Wrong transition\n        }\n        else { \n        element.removeEventListener('transitionend', transitionEnded);\n          resolve(animate);\n        }\n      }\n    element.addEventListener('transitionend', transitionEnded);\n    })\n  )\n}"]},"metadata":{},"sourceType":"module"}