{"ast":null,"code":"var _jsxFileName = \"/Dan/DansCode/dan-stevens.github.io/src/components/Gizmos/gizmo.js\";\nimport React from 'react';\nimport { Frame } from './frame';\nexport class Gizmo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.monsterDOMRef = React.createRef(); // Coordinates in DOM used for animation\n\n    this.state = {\n      displayFrame: false,\n      preMountEvents: ''\n    };\n    this.componentLifeCycleEvent = this.componentLifeCycleEvent.bind(this);\n  }\n\n  componentLifeCycleEvent(lifeCycleEvent, prevProps, prevState) {\n    document.getElementById('gizmo-updates-screen').prepend(lifeCycleEvent);\n  }\n\n  componentWillMount() {\n    this.setState({\n      preMountEvents: 'componentWillMount called'\n    });\n  }\n\n  componentDidMount() {\n    this.componentLifeCycleEvent('componentDidMount called');\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    console.log('here');\n\n    if (prevState !== this.state) {\n      this.componentLifeCycleEvent('componentDidUpdate called', prevProps.number, prevState);\n    }\n\n    if (prevProps.number !== this.props.number) {}\n  }\n\n  componentWillUnmount() {\n    this.props.onCreateMonster(this.state, this.props);\n  }\n\n  render() {\n    let frame;\n\n    if (this.state.displayFrame) {\n      frame = React.createElement(Frame, {\n        currentFrameType: this.props.currentFrameType,\n        cycleFrameType: this.cycleFrameType,\n        currentFrameOption: this.state.currentFrameOption,\n        resetFrameOption: this.resetFrameOption,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: \"gizmo\",\n      id: 'gizmoId',\n      ref: this.monsterDOMRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, frame);\n  }\n\n}","map":{"version":3,"sources":["/Dan/DansCode/dan-stevens.github.io/src/components/Gizmos/gizmo.js"],"names":["React","Frame","Gizmo","Component","constructor","props","monsterDOMRef","createRef","state","displayFrame","preMountEvents","componentLifeCycleEvent","bind","lifeCycleEvent","prevProps","prevState","document","getElementById","prepend","componentWillMount","setState","componentDidMount","componentDidUpdate","console","log","number","componentWillUnmount","onCreateMonster","render","frame","currentFrameType","cycleFrameType","currentFrameOption","resetFrameOption"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,KAAR,QAAoB,SAApB;AAEA,OAAO,MAAMC,KAAN,SAAoBF,KAAK,CAACG,SAA1B,CAAoC;AACzCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,aAAL,GAAqBN,KAAK,CAACO,SAAN,EAArB,CAFiB,CAEuB;;AACxC,SAAKC,KAAL,GAAa;AACXC,MAAAA,YAAY,EAAE,KADH;AAEXC,MAAAA,cAAc,EAAE;AAFL,KAAb;AAIA,SAAKC,uBAAL,GAA+B,KAAKA,uBAAL,CAA6BC,IAA7B,CAAkC,IAAlC,CAA/B;AACD;;AAODD,EAAAA,uBAAuB,CAACE,cAAD,EAAiBC,SAAjB,EAA4BC,SAA5B,EAAuC;AAC5DC,IAAAA,QAAQ,CAACC,cAAT,CAAwB,sBAAxB,EAAgDC,OAAhD,CAAwDL,cAAxD;AACD;;AAEDM,EAAAA,kBAAkB,GAAG;AACtB,SAAKC,QAAL,CAAc;AACbV,MAAAA,cAAc,EAAE;AADH,KAAd;AAGE;;AAEDW,EAAAA,iBAAiB,GAAG;AAClB,SAAKV,uBAAL,CAA6B,0BAA7B;AACD;;AAEDW,EAAAA,kBAAkB,CAACR,SAAD,EAAYC,SAAZ,EAAuB;AACvCQ,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;;AACD,QAAIT,SAAS,KAAK,KAAKP,KAAvB,EAA8B;AAC7B,WAAKG,uBAAL,CAA6B,2BAA7B,EAA0DG,SAAS,CAACW,MAApE,EAA4EV,SAA5E;AACA;;AACD,QAAID,SAAS,CAACW,MAAV,KAAqB,KAAKpB,KAAL,CAAWoB,MAApC,EAA4C,CAC3C;AACD;;AAEDC,EAAAA,oBAAoB,GAAG;AACrB,SAAKrB,KAAL,CAAWsB,eAAX,CAA2B,KAAKnB,KAAhC,EAAuC,KAAKH,KAA5C;AACD;;AAEDuB,EAAAA,MAAM,GAAG;AAEP,QAAIC,KAAJ;;AAEC,QAAI,KAAKrB,KAAL,CAAWC,YAAf,EAA6B;AAC5BoB,MAAAA,KAAK,GAAG,oBAAC,KAAD;AAAO,QAAA,gBAAgB,EAAE,KAAKxB,KAAL,CAAWyB,gBAApC;AAAsD,QAAA,cAAc,EAAE,KAAKC,cAA3E;AAA2F,QAAA,kBAAkB,EAAE,KAAKvB,KAAL,CAAWwB,kBAA1H;AAA8I,QAAA,gBAAgB,EAAE,KAAKC,gBAArK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAR;AACD;;AAEJ,WACE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAuB,MAAA,EAAE,EAAE,SAA3B;AAAsC,MAAA,GAAG,EAAE,KAAK3B,aAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACIuB,KADJ,CADF;AAKE;;AAxDwC","sourcesContent":["import React from 'react';\nimport {Frame} from './frame';\n\nexport class Gizmo extends React.Component {\n  constructor(props) {\n    super(props);    \n    this.monsterDOMRef = React.createRef(); // Coordinates in DOM used for animation\n    this.state = {\n      displayFrame: false,      \n      preMountEvents: ''\n    };\n    this.componentLifeCycleEvent = this.componentLifeCycleEvent.bind(this);\n  }\n\n\n\n\n\n\n  componentLifeCycleEvent(lifeCycleEvent, prevProps, prevState) {\n    document.getElementById('gizmo-updates-screen').prepend(lifeCycleEvent);\n  }\n\n  componentWillMount() {\n\tthis.setState({\n\t\tpreMountEvents: 'componentWillMount called'\n \t});\n  }\n\n  componentDidMount() {\n    this.componentLifeCycleEvent('componentDidMount called');\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    console.log('here');\n  \tif (prevState !== this.state) {\n  \t\tthis.componentLifeCycleEvent('componentDidUpdate called', prevProps.number, prevState);\n  \t}\n  \tif (prevProps.number !== this.props.number) {\n  \t}\n  }\n\n  componentWillUnmount() {\n    this.props.onCreateMonster(this.state, this.props);\n  }\n\n  render() {\n\n    let frame;\n\n     if (this.state.displayFrame) {\n      frame = <Frame currentFrameType={this.props.currentFrameType} cycleFrameType={this.cycleFrameType} currentFrameOption={this.state.currentFrameOption} resetFrameOption={this.resetFrameOption} />;\n    }\n\n\treturn (    \n\t  <div className='gizmo' id={'gizmoId'} ref={this.monsterDOMRef} >\n      {frame}\n    </div>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}