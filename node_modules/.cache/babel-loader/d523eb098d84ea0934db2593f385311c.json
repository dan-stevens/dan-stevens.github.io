{"ast":null,"code":"var _jsxFileName = \"/Dan/DansCode/dan-stevens.github.io/src/components/Gizmos/monster.js\";\nimport React from 'react';\nexport class Monster extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      color: this.props.color\n    };\n    this.monsterRef = React.createRef();\n  }\n\n  boo(floatingMonster) {\n    console.log('boo' + floatingMonster);\n    let viewport = ['top', 'right', 'bottom', 'left'];\n    let side = viewport[Math.floor(Math.random() * viewport.length)];\n    console.log(side); //Pick a location on that side\n\n    let sideLocation = Math.random() * 100 + '%';\n    console.log(sideLocation); //Animate it\n\n    console.log(floatingMonster);\n\n    switch (side) {\n      case 'top':\n        window.setTimeout(function () {\n          floatingMonster.style['left'] = sideLocation;\n          floatingMonster.className += ' floating-monster-top';\n        }, 50);\n        break;\n\n      case 'right':\n        window.setTimeout(function () {\n          floatingMonster.style['top'] = sideLocation;\n          floatingMonster.className += ' floating-monster-right';\n        }, 50);\n        break;\n\n      case 'bottom':\n        window.setTimeout(function () {\n          floatingMonster.style['left'] = sideLocation;\n          floatingMonster.className += ' floating-monster-bottom';\n        }, 50);\n        break;\n\n      case 'left':\n        window.setTimeout(function () {\n          floatingMonster.style['top'] = sideLocation;\n          floatingMonster.className += ' floating-monster-left';\n        }, 50);\n        break;\n\n      default:\n        return;\n    }\n\n    this.setState({\n      floating: true\n    });\n  }\n\n  componentDidMount() {\n    alert('here'); // this.setState({\n    // \tfloating: true\n    // })\n\n    moveOver();\n    this.monsterRef.current.addEventListener('animationend', () => {\n      animationEnd(this.monsterRef.current);\n    });\n    this.boo(this.monsterRef.current);\n  }\n\n  componentDidUpdate() {\n    // console.log('update');\n    // let floatingMonster = this.floatingMonsterRef.current;\n    // floatingMonster.addEventListener('animationend', () => {animationEnd});\n    //this.floatingMonsterRef.current.addEventListener('animationend', function() { animationEnd(that)}); //this.animationEnd(this.floatingMonsterRef.current)\n    (function loop() {\n      var rand = Math.round(Math.random() * (3000 - 500)) + 5000;\n      let floatingMonsterTimer = setTimeout(() => {\n        console.log('timout up');\n        this.boo(this.monsterRef.current); //Need to send this floating monster\n      }, rand);\n    }).bind(this)();\n  }\n\n  componentWillUnmount() {\n    console.log('made it here');\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      ref: this.monsterRef,\n      className: \"monster \".concat(this.props.species),\n      style: {\n        backgroundColor: this.state.color\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"head\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"torso\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"left-arm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"right-arm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"left-leg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"right-leg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst onRemove = () => {\n  this.props.onRemove('monsterArray', this.props.number);\n}; // const setup = (fn) => {\n// \tconsole.log('setup');\n// \tthis.monsterRef.current.addEventListener('transitionend', function() {\n// \t\t//This is for when the transition has ended...\n// \t\tthis.props.oncreateFloatingMonster(this.state, this.props);\n// \t});\n//   // Calls the function with any required arguments\n//   return fn(this.monsterRef.current)\n// }\n// Callback gets arguments from the above call\n\n\nconst moveOver = element => {\n  window.setTimeout(function () {\n    element.className += ' monster-move';\n  }, 50);\n}; // Passing a callback into a callback accepting function\n//setup(moveOver);\n\n\nconst animationEnd = monster => {\n  console.log('here man');\n  monster.className = 'floating-monster';\n  monster.style.removeProperty('top');\n  monster.style.removeProperty('right');\n  monster.style.removeProperty('bottom');\n  monster.style.removeProperty('left');\n};","map":{"version":3,"sources":["/Dan/DansCode/dan-stevens.github.io/src/components/Gizmos/monster.js"],"names":["React","Monster","Component","constructor","props","state","color","monsterRef","createRef","boo","floatingMonster","console","log","viewport","side","Math","floor","random","length","sideLocation","window","setTimeout","style","className","setState","floating","componentDidMount","alert","moveOver","current","addEventListener","animationEnd","componentDidUpdate","loop","rand","round","floatingMonsterTimer","bind","componentWillUnmount","render","species","backgroundColor","onRemove","number","element","monster","removeProperty"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,OAAN,SAAsBD,KAAK,CAACE,SAA5B,CAAsC;AAE5CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACZC,MAAAA,KAAK,EAAE,KAAKF,KAAL,CAAWE;AADN,KAAb;AAGA,SAAKC,UAAL,GAAkBP,KAAK,CAACQ,SAAN,EAAlB;AACA;;AAEFC,EAAAA,GAAG,CAACC,eAAD,EAAkB;AACpBC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAQF,eAApB;AACC,QAAIG,QAAQ,GAAG,CAAC,KAAD,EAAQ,OAAR,EAAiB,QAAjB,EAA2B,MAA3B,CAAf;AACA,QAAIC,IAAI,GAAGD,QAAQ,CAACE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBJ,QAAQ,CAACK,MAApC,CAAD,CAAnB;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAYE,IAAZ,EAJmB,CAMnB;;AACA,QAAIK,YAAY,GAAGJ,IAAI,CAACE,MAAL,KAAgB,GAAhB,GAAsB,GAAzC;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAYO,YAAZ,EARmB,CAUnB;;AACAR,IAAAA,OAAO,CAACC,GAAR,CAAYF,eAAZ;;AACA,YAAOI,IAAP;AACD,WAAK,KAAL;AACAM,QAAAA,MAAM,CAACC,UAAP,CAAmB,YAAW;AACzBX,UAAAA,eAAe,CAACY,KAAhB,CAAsB,MAAtB,IAAgCH,YAAhC;AACHT,UAAAA,eAAe,CAACa,SAAhB,IAA6B,uBAA7B;AACC,SAHH,EAGK,EAHL;AAIA;;AAEA,WAAK,OAAL;AACAH,QAAAA,MAAM,CAACC,UAAP,CAAmB,YAAW;AACzBX,UAAAA,eAAe,CAACY,KAAhB,CAAsB,KAAtB,IAA+BH,YAA/B;AACHT,UAAAA,eAAe,CAACa,SAAhB,IAA6B,yBAA7B;AACC,SAHH,EAGK,EAHL;AAIA;;AAEA,WAAK,QAAL;AACAH,QAAAA,MAAM,CAACC,UAAP,CAAmB,YAAW;AAC5BX,UAAAA,eAAe,CAACY,KAAhB,CAAsB,MAAtB,IAAgCH,YAAhC;AACGT,UAAAA,eAAe,CAACa,SAAhB,IAA6B,0BAA7B;AACC,SAHN,EAGQ,EAHR;AAIA;;AAEA,WAAK,MAAL;AACAH,QAAAA,MAAM,CAACC,UAAP,CAAmB,YAAW;AAC5BX,UAAAA,eAAe,CAACY,KAAhB,CAAsB,KAAtB,IAA+BH,YAA/B;AACGT,UAAAA,eAAe,CAACa,SAAhB,IAA6B,wBAA7B;AACC,SAHN,EAGQ,EAHR;AAIA;;AACA;AACA;AA7BC;;AA+BA,SAAKC,QAAL,CAAc;AACZC,MAAAA,QAAQ,EAAE;AADE,KAAd;AAGD;;AAEDC,EAAAA,iBAAiB,GAAG;AACnBC,IAAAA,KAAK,CAAC,MAAD,CAAL,CADmB,CAEnB;AACA;AACA;;AACAC,IAAAA,QAAQ;AACR,SAAKrB,UAAL,CAAgBsB,OAAhB,CAAwBC,gBAAxB,CAAyC,cAAzC,EAAyD,MAAM;AAACC,MAAAA,YAAY,CAAC,KAAKxB,UAAL,CAAgBsB,OAAjB,CAAZ;AAAsC,KAAtG;AACA,SAAKpB,GAAL,CAAS,KAAKF,UAAL,CAAgBsB,OAAzB;AACA;;AAEDG,EAAAA,kBAAkB,GAAG;AACnB;AAEA;AAEA;AAEA;AAED,cAASC,IAAT,GAAgB;AACZ,UAAIC,IAAI,GAAGnB,IAAI,CAACoB,KAAL,CAAWpB,IAAI,CAACE,MAAL,MAAiB,OAAO,GAAxB,CAAX,IAA2C,IAAtD;AACA,UAAImB,oBAAoB,GAAGf,UAAU,CAAE,MAAM;AAC5CV,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,aAAKH,GAAL,CAAS,KAAKF,UAAL,CAAgBsB,OAAzB,EAF4C,CAEX;AACpC,OAHuC,EAGpCK,IAHoC,CAArC;AAIH,KAND,EAMEG,IANF,CAMO,IANP,GAAD;AAOC;;AAEDC,EAAAA,oBAAoB,GAAG;AACtB3B,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AAEA;;AAIA2B,EAAAA,MAAM,GAAG;AACR,WACC;AAAK,MAAA,GAAG,EAAE,KAAKhC,UAAf;AAA2B,MAAA,SAAS,oBAAa,KAAKH,KAAL,CAAWoC,OAAxB,CAApC;AAAuE,MAAA,KAAK,EAAE;AAACC,QAAAA,eAAe,EAAE,KAAKpC,KAAL,CAAWC;AAA7B,OAA9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,EAEC;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFD,EAGC;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHD,EAIC;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJD,EAKC;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALD,EAMC;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAND,CADD;AAUA;;AAxG2C;;AA4G7C,MAAMoC,QAAQ,GAAG,MAAM;AACtB,OAAKtC,KAAL,CAAWsC,QAAX,CAAoB,cAApB,EAAoC,KAAKtC,KAAL,CAAWuC,MAA/C;AACA,CAFD,C,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACA,MAAMf,QAAQ,GAAIgB,OAAD,IAAa;AAC7BxB,EAAAA,MAAM,CAACC,UAAP,CAAmB,YAAW;AAE3BuB,IAAAA,OAAO,CAACrB,SAAR,IAAqB,eAArB;AAEH,GAJA,EAIE,EAJF;AAMA,CAPD,C,CASA;AACA;;;AAEA,MAAMQ,YAAY,GAAIc,OAAD,IAAa;AACjClC,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACCiC,EAAAA,OAAO,CAACtB,SAAR,GAAoB,kBAApB;AACAsB,EAAAA,OAAO,CAACvB,KAAR,CAAcwB,cAAd,CAA6B,KAA7B;AACAD,EAAAA,OAAO,CAACvB,KAAR,CAAcwB,cAAd,CAA6B,OAA7B;AACAD,EAAAA,OAAO,CAACvB,KAAR,CAAcwB,cAAd,CAA6B,QAA7B;AACAD,EAAAA,OAAO,CAACvB,KAAR,CAAcwB,cAAd,CAA6B,MAA7B;AACD,CAPD","sourcesContent":["import React from 'react';\n\nexport class Monster extends React.Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tcolor: this.props.color\n\t\t}\n\t\tthis.monsterRef = React.createRef();\n\t}\n\nboo(floatingMonster) {\n\tconsole.log('boo' + floatingMonster);\n  let viewport = ['top', 'right', 'bottom', 'left'];\n  let side = viewport[Math.floor(Math.random() * viewport.length)];\n  console.log(side);\n\n  //Pick a location on that side\n  let sideLocation = Math.random() * 100 + '%';\n  console.log(sideLocation);\n  \n  //Animate it\n  console.log(floatingMonster);\n  switch(side) {\n\tcase 'top': \n\twindow.setTimeout( function() {\n      floatingMonster.style['left'] = sideLocation;\n\t  floatingMonster.className += ' floating-monster-top';\n\t  }, 50);\n\tbreak;\n\n\tcase 'right':\n\twindow.setTimeout( function() {\n      floatingMonster.style['top'] = sideLocation;\n\t  floatingMonster.className += ' floating-monster-right';  \n\t  }, 50);\n\tbreak;\n\n\tcase 'bottom':\n\twindow.setTimeout( function() {\n\t  floatingMonster.style['left'] = sideLocation;\n      floatingMonster.className += ' floating-monster-bottom';\n      }, 50);\n\tbreak;\n\n\tcase 'left':\n\twindow.setTimeout( function() {\n\t  floatingMonster.style['top'] = sideLocation;\n      floatingMonster.className += ' floating-monster-left';\n      }, 50);\n\tbreak;\n\tdefault:\n\treturn\n  }\n  this.setState({\n    floating: true\n  });\n}\n\ncomponentDidMount() {\n\talert('here');\n\t// this.setState({\n\t// \tfloating: true\n\t// })\n\tmoveOver()\n\tthis.monsterRef.current.addEventListener('animationend', () => {animationEnd(this.monsterRef.current)});\n\tthis.boo(this.monsterRef.current);\n}\n\ncomponentDidUpdate() {\n  // console.log('update');\n\n  // let floatingMonster = this.floatingMonsterRef.current;\n\n  // floatingMonster.addEventListener('animationend', () => {animationEnd});\n\n  //this.floatingMonsterRef.current.addEventListener('animationend', function() { animationEnd(that)}); //this.animationEnd(this.floatingMonsterRef.current)\n\t\n(function loop() {\n\t    var rand = Math.round(Math.random() * (3000 - 500)) + 5000;\n\t    let floatingMonsterTimer = setTimeout((() => {\n\t    \tconsole.log('timout up');\n\t\t    this.boo(this.monsterRef.current)//Need to send this floating monster\n\t\t}), rand);\n\t}.bind(this)());\n}\n\ncomponentWillUnmount() {\n\tconsole.log('made it here');\n\t\n}\n\n\t\n\n\trender() {\n\t\treturn (\n\t\t\t<div ref={this.monsterRef} className={`monster ${this.props.species}`} style={{backgroundColor: this.state.color}}>\n\t\t\t\t<div className='head' />\n\t\t\t\t<div className='torso' />\n\t\t\t\t<div className='left-arm' />\n\t\t\t\t<div className='right-arm' />\n\t\t\t\t<div className='left-leg' />\n\t\t\t\t<div className='right-leg' />\n\t\t\t</div>\n\t\t)\n\t}\n\n}\n\nconst onRemove = () => {\n\tthis.props.onRemove('monsterArray', this.props.number);\n}\n\n// const setup = (fn) => {\n// \tconsole.log('setup');\n// \tthis.monsterRef.current.addEventListener('transitionend', function() {\n// \t\t//This is for when the transition has ended...\n// \t\tthis.props.oncreateFloatingMonster(this.state, this.props);\n// \t});\n//   // Calls the function with any required arguments\n//   return fn(this.monsterRef.current)\n// }\n\n// Callback gets arguments from the above call\nconst moveOver = (element) => {\n\twindow.setTimeout( function() {\n\n    element.className += ' monster-move';\n    \n}, 50);\n\n}\n\n// Passing a callback into a callback accepting function\n//setup(moveOver);\n\nconst animationEnd = (monster) => {\n\tconsole.log('here man');\n  monster.className = 'floating-monster';\n  monster.style.removeProperty('top');\n  monster.style.removeProperty('right');\n  monster.style.removeProperty('bottom');\n  monster.style.removeProperty('left');\n}\n"]},"metadata":{},"sourceType":"module"}