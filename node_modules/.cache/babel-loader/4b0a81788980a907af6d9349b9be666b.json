{"ast":null,"code":"// Set of animations that create a new bare gizmo and sets it down\nexport const craneOffScreen = animate => {\n  const element = document.getElementById('crane');\n  return cssTransitionToPromise(animate, element, 'margin-left', '-200px');\n}; // Set of animations that pick up a gizmo, move it to the converter, drop it, and reset.\n\nexport const craneToPickup = animate => {\n  const element = document.getElementById('crane');\n  return cssTransitionToPromise(animate, element, 'margin-left', '50%');\n};\nexport const craneClawLower = animate => {\n  const element = document.getElementById('crane-claw');\n  return cssTransitionToPromise(animate, element, 'top', animate.monsterOffsetTop + 'px');\n};\nexport const craneClawGrab = animate => {\n  const element = document.getElementById('crane-claw');\n  return cssTransitionToPromise(animate, element, 'background-color', 'red');\n};\nexport const craneClawPickup = animate => {\n  const element = document.getElementById('crane-claw');\n  return cssTransitionToPromise(animate, element, 'top', '0');\n};\nexport const monsterPickup = animate => {\n  const element = document.getElementById('gizmoId-' + animate.monsterNumber);\n  return cssTransitionToPromise(animate, element, 'top', -animate.monsterOffsetTop + 'px');\n};\nexport const craneToDrop = animate => {\n  const element = document.getElementById('crane');\n  return cssTransitionToPromise(animate, element, 'margin-left', '80%');\n};\nexport const monsterToDrop = animate => {\n  const element = document.getElementById('gizmoId-' + animate.monsterNumber);\n  return cssTransitionToPromise(animate, element, 'left', '50%');\n};\nexport const craneClawDrop = animate => {\n  const element = document.getElementById('crane-claw');\n  return cssTransitionToPromise(animate, element, 'background-color', 'green');\n};\nexport const monsterDrop = animate => {\n  const element = document.getElementById('gizmoId-' + animate.monsterNumber);\n  return cssTransitionToPromise(animate, element, 'top', '100px');\n};\nexport const monsterSpin = animate => {\n  const element = document.getElementById('gizmoId-' + animate.monsterNumber);\n  return cssTransitionToPromise(animate, element, 'transform', 'rotate(180deg)');\n};\nexport const craneReset = animate => {\n  const element = document.getElementById('crane');\n  return cssTransitionToPromise(animate, element, 'margin-left', 0);\n}; // Add / remove transition event listeners\n\nconst cssTransitionToPromise = (animate, element, property, value) => {\n  return new Promise(resolve => {\n    element.style[property] = value;\n\n    const transitionEnded = e => {\n      if (e.propertyName !== property) {\n        return; //Wrong transition\n      } else {\n        element.removeEventListener('transitionend', transitionEnded);\n        resolve(animate);\n      }\n    };\n\n    element.addEventListener('transitionend', transitionEnded);\n  });\n};","map":{"version":3,"sources":["/Dan/DansCode/dan-stevens.github.io/src/components/Gizmos/gizmoAnimations.js"],"names":["craneOffScreen","animate","element","document","getElementById","cssTransitionToPromise","craneToPickup","craneClawLower","monsterOffsetTop","craneClawGrab","craneClawPickup","monsterPickup","monsterNumber","craneToDrop","monsterToDrop","craneClawDrop","monsterDrop","monsterSpin","craneReset","property","value","Promise","resolve","style","transitionEnded","e","propertyName","removeEventListener","addEventListener"],"mappings":"AAAA;AACA,OAAO,MAAMA,cAAc,GAAIC,OAAD,IAAa;AACzC,QAAMC,OAAO,GAAGC,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CAAhB;AACA,SAAQC,sBAAsB,CAACJ,OAAD,EAAUC,OAAV,EAAmB,aAAnB,EAAkC,QAAlC,CAA9B;AACD,CAHM,C,CAKP;;AACA,OAAO,MAAMI,aAAa,GAAIL,OAAD,IAAa;AACxC,QAAMC,OAAO,GAAGC,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CAAhB;AACA,SAAQC,sBAAsB,CAACJ,OAAD,EAAUC,OAAV,EAAmB,aAAnB,EAAkC,KAAlC,CAA9B;AACD,CAHM;AAKP,OAAO,MAAMK,cAAc,GAAIN,OAAD,IAAa;AACzC,QAAMC,OAAO,GAAGC,QAAQ,CAACC,cAAT,CAAwB,YAAxB,CAAhB;AACC,SAAQC,sBAAsB,CAACJ,OAAD,EAAUC,OAAV,EAAmB,KAAnB,EAA0BD,OAAO,CAACO,gBAAR,GAA2B,IAArD,CAA9B;AACF,CAHM;AAKP,OAAO,MAAMC,aAAa,GAAIR,OAAD,IAAa;AACxC,QAAMC,OAAO,GAAGC,QAAQ,CAACC,cAAT,CAAwB,YAAxB,CAAhB;AACC,SAAQC,sBAAsB,CAACJ,OAAD,EAAUC,OAAV,EAAmB,kBAAnB,EAAuC,KAAvC,CAA9B;AACF,CAHM;AAKP,OAAO,MAAMQ,eAAe,GAAIT,OAAD,IAAa;AAC3C,QAAMC,OAAO,GAAGC,QAAQ,CAACC,cAAT,CAAwB,YAAxB,CAAhB;AACE,SAAQC,sBAAsB,CAACJ,OAAD,EAAUC,OAAV,EAAmB,KAAnB,EAA0B,GAA1B,CAA9B;AACF,CAHM;AAKP,OAAO,MAAMS,aAAa,GAAIV,OAAD,IAAa;AACzC,QAAMC,OAAO,GAAGC,QAAQ,CAACC,cAAT,CAAwB,aAAaH,OAAO,CAACW,aAA7C,CAAhB;AACE,SAAQP,sBAAsB,CAACJ,OAAD,EAAUC,OAAV,EAAmB,KAAnB,EAA0B,CAAED,OAAO,CAACO,gBAAV,GAA6B,IAAvD,CAA9B;AACF,CAHM;AAKP,OAAO,MAAMK,WAAW,GAAIZ,OAAD,IAAa;AACvC,QAAMC,OAAO,GAAGC,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CAAhB;AACE,SAAQC,sBAAsB,CAACJ,OAAD,EAAUC,OAAV,EAAmB,aAAnB,EAAkC,KAAlC,CAA9B;AACF,CAHM;AAKP,OAAO,MAAMY,aAAa,GAAIb,OAAD,IAAa;AACzC,QAAMC,OAAO,GAAGC,QAAQ,CAACC,cAAT,CAAwB,aAAaH,OAAO,CAACW,aAA7C,CAAhB;AACE,SAAQP,sBAAsB,CAACJ,OAAD,EAAUC,OAAV,EAAmB,MAAnB,EAA2B,KAA3B,CAA9B;AACF,CAHM;AAKP,OAAO,MAAMa,aAAa,GAAId,OAAD,IAAa;AACzC,QAAMC,OAAO,GAAGC,QAAQ,CAACC,cAAT,CAAwB,YAAxB,CAAhB;AACE,SAAQC,sBAAsB,CAACJ,OAAD,EAAUC,OAAV,EAAmB,kBAAnB,EAAuC,OAAvC,CAA9B;AACF,CAHM;AAKP,OAAO,MAAMc,WAAW,GAAIf,OAAD,IAAa;AACvC,QAAMC,OAAO,GAAGC,QAAQ,CAACC,cAAT,CAAwB,aAAaH,OAAO,CAACW,aAA7C,CAAhB;AACE,SAAQP,sBAAsB,CAACJ,OAAD,EAAUC,OAAV,EAAmB,KAAnB,EAA0B,OAA1B,CAA9B;AACF,CAHM;AAKP,OAAO,MAAMe,WAAW,GAAIhB,OAAD,IAAa;AACvC,QAAMC,OAAO,GAAGC,QAAQ,CAACC,cAAT,CAAwB,aAAaH,OAAO,CAACW,aAA7C,CAAhB;AACE,SAAQP,sBAAsB,CAACJ,OAAD,EAAUC,OAAV,EAAmB,WAAnB,EAAgC,gBAAhC,CAA9B;AACF,CAHM;AAKP,OAAO,MAAMgB,UAAU,GAAIjB,OAAD,IAAa;AACrC,QAAMC,OAAO,GAAGC,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CAAhB;AACA,SAAQC,sBAAsB,CAACJ,OAAD,EAAUC,OAAV,EAAmB,aAAnB,EAAkC,CAAlC,CAA9B;AACD,CAHM,C,CAKP;;AACA,MAAMG,sBAAsB,GAAG,CAACJ,OAAD,EAAUC,OAAV,EAAmBiB,QAAnB,EAA6BC,KAA7B,KAAuC;AACtE,SACM,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AACrBpB,IAAAA,OAAO,CAACqB,KAAR,CAAcJ,QAAd,IAA0BC,KAA1B;;AACA,UAAMI,eAAe,GAAGC,CAAC,IAAI;AAC7B,UAAIA,CAAC,CAACC,YAAF,KAAmBP,QAAvB,EAAiC;AACjC,eADiC,CACzB;AACP,OAFD,MAGK;AACLjB,QAAAA,OAAO,CAACyB,mBAAR,CAA4B,eAA5B,EAA6CH,eAA7C;AACEF,QAAAA,OAAO,CAACrB,OAAD,CAAP;AACD;AACF,KARC;;AASJC,IAAAA,OAAO,CAAC0B,gBAAR,CAAyB,eAAzB,EAA0CJ,eAA1C;AACC,GAZC,CADN;AAeC,CAhBD","sourcesContent":["// Set of animations that create a new bare gizmo and sets it down\nexport const craneOffScreen = (animate) => {\n  const element = document.getElementById('crane');\n  return (cssTransitionToPromise(animate, element, 'margin-left', '-200px'));\n}\n\n// Set of animations that pick up a gizmo, move it to the converter, drop it, and reset.\nexport const craneToPickup = (animate) => {\n  const element = document.getElementById('crane');\n  return (cssTransitionToPromise(animate, element, 'margin-left', '50%'))\n}\n\nexport const craneClawLower = (animate) => {\n  const element = document.getElementById('crane-claw');\n   return (cssTransitionToPromise(animate, element, 'top', animate.monsterOffsetTop + 'px'))\n}\n\nexport const craneClawGrab = (animate) => {\n  const element = document.getElementById('crane-claw');\n   return (cssTransitionToPromise(animate, element, 'background-color', 'red'))\n}\n\nexport const craneClawPickup = (animate) => {\n\tconst element = document.getElementById('crane-claw');\n   return (cssTransitionToPromise(animate, element, 'top', '0'))\n}\n\nexport const monsterPickup = (animate) => {\n\tconst element = document.getElementById('gizmoId-' + animate.monsterNumber);\n   return (cssTransitionToPromise(animate, element, 'top', - animate.monsterOffsetTop + 'px'))\n}\n\nexport const craneToDrop = (animate) => {\n\tconst element = document.getElementById('crane');\n   return (cssTransitionToPromise(animate, element, 'margin-left', '80%'))\n}\n\nexport const monsterToDrop = (animate) => {\n\tconst element = document.getElementById('gizmoId-' + animate.monsterNumber);\n   return (cssTransitionToPromise(animate, element, 'left', '50%'))\n}\n\nexport const craneClawDrop = (animate) => {\n\tconst element = document.getElementById('crane-claw');\n   return (cssTransitionToPromise(animate, element, 'background-color', 'green'))\n}\n\nexport const monsterDrop = (animate) => {\n\tconst element = document.getElementById('gizmoId-' + animate.monsterNumber);\n   return (cssTransitionToPromise(animate, element, 'top', '100px'))\n}\n\nexport const monsterSpin = (animate) => {\n\tconst element = document.getElementById('gizmoId-' + animate.monsterNumber);\n   return (cssTransitionToPromise(animate, element, 'transform', 'rotate(180deg)'))\n}\n\nexport const craneReset = (animate) => {\n  const element = document.getElementById('crane');\n  return (cssTransitionToPromise(animate, element, 'margin-left', 0))\n}\n\n// Add / remove transition event listeners\nconst cssTransitionToPromise = (animate, element, property, value) => {\nreturn (\n      new Promise(resolve => {\n        element.style[property] = value;\n        const transitionEnded = e => {\n        if (e.propertyName !== property) {\n        return; //Wrong transition\n        }\n        else { \n        element.removeEventListener('transitionend', transitionEnded);\n          resolve(animate);\n        }\n      }\n    element.addEventListener('transitionend', transitionEnded);\n    })\n  )\n}"]},"metadata":{},"sourceType":"module"}