{"ast":null,"code":"// Set of animations that create a new gizmo and set it down\nexport const craneOffScreen = animate => {\n  const element = document.getElementById('crane');\n  return cssTransitionToPromise(animate, element, 'margin-left', '-60%');\n};\nexport const craneIntoScreen = animate => {\n  const element = document.getElementById('crane');\n  return cssTransitionToPromise(animate, element, 'margin-left', '20%');\n};\nexport const gizmoIntoScreen = animate => {\n  const element = document.getElementById('gizmoId-' + animate.monsterNumber);\n  return cssTransitionToPromise(animate, element, 'left', '0%');\n};\nexport const craneClawLeftOpen = animate => {\n  const element = document.getElementById('crane-claw-left');\n  return cssTransitionToPromise(animate, element, 'transform', 'rotate(45deg)');\n};\nexport const craneClawRightOpen = animate => {\n  const element = document.getElementById('crane-claw-right');\n  return cssTransitionToPromise(animate, element, 'transform', 'rotate(-45deg)');\n}; // export const gizmoLower = (animate) => {\n//   const element = document.getElementById('gizmoId-' + animate.monsterNumber);\n//   return (cssTransitionToPromise(animate, element, 'bottom', animate.monsterOffsetTop + 'px'));\n// }\n\nexport const gizmoFall = animate => {\n  const element = document.getElementById('gizmoId-' + animate.monsterNumber);\n  return cssAnimationToPromise(animate, element, 'gizmoFall');\n};\nexport const gizmoSpin = animate => {\n  const element = document.getElementById('gizmoId-' + animate.monsterNumber);\n  return cssTransitionToPromise(animate, element, 'transform', 'rotate(10deg)');\n};\nexport const gizmoFlatten = animate => {\n  const element = document.getElementById('gizmoId-' + animate.monsterNumber);\n  return cssTransitionToPromise(animate, element, 'transform', 'rotate(0deg)');\n};\nexport const craneReset = animate => {\n  const element = document.getElementById('crane');\n  return cssTransitionToPromise(animate, element, 'margin-left', '0%');\n}; // Set of animations that pick up a gizmo, move it to the converter, drop it, and reset.\n//craneIntoScreen\n\nexport const craneClawLower = animate => {\n  const element = document.getElementById('crane-line');\n  return cssTransitionToPromise(animate, element, 'height', '150px');\n};\nexport const craneClawLeftClose = animate => {\n  const element = document.getElementById('crane-claw-left');\n  return cssTransitionToPromise(animate, element, 'transform', 'rotate(0deg)');\n};\nexport const craneClawRightClose = animate => {\n  const element = document.getElementById('crane-claw-right');\n  return cssTransitionToPromise(animate, element, 'transform', 'rotate(0deg)');\n};\nexport const craneClawPickup = animate => {\n  const element = document.getElementById('crane-line');\n  return cssTransitionToPromise(animate, element, 'height', '100%');\n};\nexport const gizmoPickup = animate => {\n  const element = document.getElementById('gizmoId-' + animate.monsterNumber);\n  console.log('element: ' + element);\n  return cssTransitionToPromise(animate, element, 'bottom', 'calc(100% - 200px');\n};\nexport const craneToDrop = animate => {\n  const element = document.getElementById('crane');\n  return cssTransitionToPromise(animate, element, 'margin-left', '80%');\n};\nexport const monsterToDrop = animate => {\n  const element = document.getElementById('gizmoId-' + animate.monsterNumber);\n  return cssTransitionToPromise(animate, element, 'left', '50%');\n}; //craneClawOpen\n\nexport const monsterDrop = animate => {\n  const element = document.getElementById('gizmoId-' + animate.monsterNumber);\n  return cssTransitionToPromise(animate, element, 'bottom', '0px');\n}; //gizmoSpin\n//craneReset\n// Add / remove transition event listeners\n\nconst cssTransitionToPromise = (animate, element, property, value) => {\n  return new Promise(resolve => {\n    element.style[property] = value;\n\n    const transitionEnded = e => {\n      if (e.propertyName !== property) {\n        return; //Wrong transition\n      } else {\n        element.removeEventListener('transitionend', transitionEnded);\n        resolve(animate);\n      }\n    };\n\n    element.addEventListener('transitionend', transitionEnded);\n  });\n}; // Add / remove transition event listeners\n\n\nconst cssAnimationToPromise = (animate, element, className) => {\n  return new Promise(resolve => {\n    element.classList.add(className);\n\n    const animationEnded = e => {\n      if (e.animationName !== className) {\n        console.log(e);\n        return; //Wrong animation\n      } else {\n        alert('else');\n        element.removeEventListener('animationend', animationEnded);\n        resolve(animate);\n      }\n    };\n\n    element.addEventListener('animationend', animationEnded);\n  });\n};","map":{"version":3,"sources":["/Dan/DansCode/dan-stevens.github.io/src/components/Gizmos/gizmoAnimations.js"],"names":["craneOffScreen","animate","element","document","getElementById","cssTransitionToPromise","craneIntoScreen","gizmoIntoScreen","monsterNumber","craneClawLeftOpen","craneClawRightOpen","gizmoFall","cssAnimationToPromise","gizmoSpin","gizmoFlatten","craneReset","craneClawLower","craneClawLeftClose","craneClawRightClose","craneClawPickup","gizmoPickup","console","log","craneToDrop","monsterToDrop","monsterDrop","property","value","Promise","resolve","style","transitionEnded","e","propertyName","removeEventListener","addEventListener","className","classList","add","animationEnded","animationName","alert"],"mappings":"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","sourcesContent":["// Set of animations that create a new gizmo and set it down\nexport const craneOffScreen = (animate) => {\n  const element = document.getElementById('crane');\n  return (cssTransitionToPromise(animate, element, 'margin-left', '-60%'));\n}\n\nexport const craneIntoScreen = (animate) => {\n  const element = document.getElementById('crane');\n  return (cssTransitionToPromise(animate, element, 'margin-left', '20%'));\n}\n\nexport const gizmoIntoScreen = (animate) => {\n  const element = document.getElementById('gizmoId-' + animate.monsterNumber);\n  return (cssTransitionToPromise(animate, element, 'left', '0%'));\n}\n\nexport const craneClawLeftOpen = (animate) => {\n  const element = document.getElementById('crane-claw-left');\n   return (cssTransitionToPromise(animate, element, 'transform', 'rotate(45deg)'));\n}\n\nexport const craneClawRightOpen = (animate) => {\n  const element = document.getElementById('crane-claw-right');\n   return (cssTransitionToPromise(animate, element, 'transform', 'rotate(-45deg)'));\n}\n\n// export const gizmoLower = (animate) => {\n//   const element = document.getElementById('gizmoId-' + animate.monsterNumber);\n//   return (cssTransitionToPromise(animate, element, 'bottom', animate.monsterOffsetTop + 'px'));\n// }\n\nexport const gizmoFall = (animate) => {\n  const element = document.getElementById('gizmoId-' + animate.monsterNumber);\n  return (cssAnimationToPromise(animate, element, 'gizmoFall'));\n}\n\n\nexport const gizmoSpin = (animate) => {\n  const element = document.getElementById('gizmoId-' + animate.monsterNumber);\n   return (cssTransitionToPromise(animate, element, 'transform', 'rotate(10deg)'));\n}\n\nexport const gizmoFlatten = (animate) => {\n  const element = document.getElementById('gizmoId-' + animate.monsterNumber);\n   return (cssTransitionToPromise(animate, element, 'transform', 'rotate(0deg)'));\n}\n\nexport const craneReset = (animate) => {\n  const element = document.getElementById('crane');\n  return (cssTransitionToPromise(animate, element, 'margin-left', '0%'));\n}\n\n\n// Set of animations that pick up a gizmo, move it to the converter, drop it, and reset.\n\n//craneIntoScreen\n\nexport const craneClawLower = (animate) => {\n  const element = document.getElementById('crane-line');\n   return (cssTransitionToPromise(animate, element, 'height', '150px'))\n}\n\nexport const craneClawLeftClose = (animate) => {\n  const element = document.getElementById('crane-claw-left');\n   return (cssTransitionToPromise(animate, element, 'transform', 'rotate(0deg)'))\n}\n\nexport const craneClawRightClose = (animate) => {\n  const element = document.getElementById('crane-claw-right');\n   return (cssTransitionToPromise(animate, element, 'transform', 'rotate(0deg)'))\n}\n\nexport const craneClawPickup = (animate) => {\n\tconst element = document.getElementById('crane-line');\n   return (cssTransitionToPromise(animate, element, 'height', '100%'))\n}\n\nexport const gizmoPickup = (animate) => {\n\tconst element = document.getElementById('gizmoId-' + animate.monsterNumber);\n  console.log('element: ' + element);\n   return (cssTransitionToPromise(animate, element, 'bottom', 'calc(100% - 200px'))\n}\n\nexport const craneToDrop = (animate) => {\n\tconst element = document.getElementById('crane');\n   return (cssTransitionToPromise(animate, element, 'margin-left', '80%'))\n}\n\nexport const monsterToDrop = (animate) => {\n\tconst element = document.getElementById('gizmoId-' + animate.monsterNumber);\n   return (cssTransitionToPromise(animate, element, 'left', '50%'))\n}\n\n//craneClawOpen\n\nexport const monsterDrop = (animate) => {\n\tconst element = document.getElementById('gizmoId-' + animate.monsterNumber);\n   return (cssTransitionToPromise(animate, element, 'bottom', '0px'))\n}\n\n//gizmoSpin\n\n//craneReset\n\n// Add / remove transition event listeners\nconst cssTransitionToPromise = (animate, element, property, value) => {\nreturn (\n      new Promise(resolve => {\n        element.style[property] = value;\n        const transitionEnded = e => {\n        if (e.propertyName !== property) {\n        return; //Wrong transition\n        }\n        else { \n        element.removeEventListener('transitionend', transitionEnded);\n          resolve(animate);\n        }\n      }\n    element.addEventListener('transitionend', transitionEnded);\n    })\n  )\n}\n\n// Add / remove transition event listeners\nconst cssAnimationToPromise = (animate, element, className) => {\nreturn (\n      new Promise(resolve => {\n        element.classList.add(className);\n        const animationEnded = e => {\n        if (e.animationName !== className) {\n          console.log(e);\n        return; //Wrong animation\n        }\n        else { \n          alert('else');\n        element.removeEventListener('animationend', animationEnded);\n          resolve(animate);\n        }\n      }\n    element.addEventListener('animationend', animationEnded);\n    })\n  )\n}"]},"metadata":{},"sourceType":"module"}