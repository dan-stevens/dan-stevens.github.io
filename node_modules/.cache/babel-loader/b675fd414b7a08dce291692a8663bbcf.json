{"ast":null,"code":"var _jsxFileName = \"/Dan/DansCode/dan-stevens.github.io/src/components/Gizmos/monster.js\";\nimport React from 'react';\nexport class Monster extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      color: this.props.color\n    };\n    this.monsterRef = React.createRef();\n  }\n\n  componentDidMount() {\n    console.log('componentWillMount'); //\n\n    const onRemove = () => {\n      this.props.onRemove('monsterArray', this.props.number);\n    };\n\n    const setup = fn => {\n      console.log('setup');\n      this.monsterRef.current.addEventListener('transitionend', function () {\n        //This is for when the transition has ended...\n        this.props.oncreateFloatingMonster(this.state, this.props);\n      }); // Calls the function with any required arguments\n\n      return fn(this.monsterRef.current);\n    }; // Callback gets arguments from the above call\n\n\n    const moveOver = element => {\n      window.setTimeout(function () {\n        element.className += ' monster-move';\n      }, 50);\n    }; // Passing a callback into a callback accepting function\n\n\n    setup(moveOver);\n  }\n\n  componentDidUpdate() {\n    // console.log('update');\n    // let floatingMonster = this.floatingMonsterRef.current;\n    // floatingMonster.addEventListener('animationend', () => {animationEnd});\n    //this.floatingMonsterRef.current.addEventListener('animationend', function() { animationEnd(that)}); //this.animationEnd(this.floatingMonsterRef.current)\n    (function loop() {\n      var rand = Math.round(Math.random() * (3000 - 500)) + 5000;\n      let floatingMonsterTimer = setTimeout(() => {\n        console.log('timout up');\n        this.boo(this.floatingMonsterRef.current); //Need to send this floating monster\n      }, rand);\n    }).bind(this)();\n  }\n\n  componentWillUnmount() {\n    console.log('made it here');\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      ref: this.monsterRef,\n      className: \"monster \".concat(this.props.species),\n      style: {\n        backgroundColor: this.state.color\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"head\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"torso\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"left-arm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"right-arm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"left-leg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"right-leg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Dan/DansCode/dan-stevens.github.io/src/components/Gizmos/monster.js"],"names":["React","Monster","Component","constructor","props","state","color","monsterRef","createRef","componentDidMount","console","log","onRemove","number","setup","fn","current","addEventListener","oncreateFloatingMonster","moveOver","element","window","setTimeout","className","componentDidUpdate","loop","rand","Math","round","random","floatingMonsterTimer","boo","floatingMonsterRef","bind","componentWillUnmount","render","species","backgroundColor"],"mappings":"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","sourcesContent":["import React from 'react';\n\nexport class Monster extends React.Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tcolor: this.props.color\n\t\t}\n\t\tthis.monsterRef = React.createRef();\n\t}\n\n\tcomponentDidMount() {\n\t\tconsole.log('componentWillMount');\n\t\t\n\t\t//\n\nconst onRemove = () => {\n\tthis.props.onRemove('monsterArray', this.props.number);\n}\n\n\tconst setup = (fn) => {\n\t\tconsole.log('setup');\n\t\tthis.monsterRef.current.addEventListener('transitionend', function() {\n\t\t\t//This is for when the transition has ended...\n\t\t\tthis.props.oncreateFloatingMonster(this.state, this.props);\n\t\t});\n\t  // Calls the function with any required arguments\n\t  return fn(this.monsterRef.current)\n\t}\n\n// Callback gets arguments from the above call\n\tconst moveOver = (element) => {\n\t\twindow.setTimeout( function() {\n    \n\t    element.className += ' monster-move';\n\t    \n\t}, 50);\n\n\t}\n\n// Passing a callback into a callback accepting function\nsetup(moveOver);\n\n\n\n}\n\ncomponentDidUpdate() {\n  // console.log('update');\n\n  // let floatingMonster = this.floatingMonsterRef.current;\n\n  // floatingMonster.addEventListener('animationend', () => {animationEnd});\n\n  //this.floatingMonsterRef.current.addEventListener('animationend', function() { animationEnd(that)}); //this.animationEnd(this.floatingMonsterRef.current)\n\t\n(function loop() {\n\t    var rand = Math.round(Math.random() * (3000 - 500)) + 5000;\n\t    let floatingMonsterTimer = setTimeout((() => {\n\t    \tconsole.log('timout up');\n\t\t    this.boo(this.floatingMonsterRef.current)//Need to send this floating monster\n\t\t}), rand);\n\t}.bind(this)());\n}\n\ncomponentWillUnmount() {\n\tconsole.log('made it here');\n\t\n}\n\n\t\n\n\trender() {\n\t\treturn (\n\t\t\t<div ref={this.monsterRef} className={`monster ${this.props.species}`} style={{backgroundColor: this.state.color}}>\n\t\t\t\t<div className='head' />\n\t\t\t\t<div className='torso' />\n\t\t\t\t<div className='left-arm' />\n\t\t\t\t<div className='right-arm' />\n\t\t\t\t<div className='left-leg' />\n\t\t\t\t<div className='right-leg' />\n\t\t\t</div>\n\t\t)\n\t}\n\n}"]},"metadata":{},"sourceType":"module"}