{"ast":null,"code":"var _jsxFileName = \"/Dan/DansCode/dan-stevens.github.io/src/components/Gizmos/gizmo.js\";\nimport React from 'react';\nimport { GizmoControls } from './gizmoControls';\nexport class Gizmo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.myRef = React.createRef();\n    this.state = {\n      backgroundColor: '#fff',\n      width: '200px',\n      height: '100px',\n      borderRadius: '0px',\n      preMountEvents: ''\n    };\n    this.toggleColor = this.toggleColor.bind(this);\n    this.toggleHeight = this.toggleHeight.bind(this);\n    this.toggleWidth = this.toggleWidth.bind(this);\n    this.toggleCorners = this.toggleCorners.bind(this);\n    this.componentLifeCycleEvent = this.componentLifeCycleEvent.bind(this);\n  }\n\n  toggleColor() {\n    this.setState({\n      backgroundColor: this.state.backgroundColor === '#fff' ? '#000' : '#fff'\n    });\n  }\n\n  toggleHeight() {\n    this.setState({\n      height: this.state.height === '100px' ? '200px' : '100px'\n    });\n  }\n\n  toggleWidth() {\n    this.setState({\n      width: this.state.width === '200px' ? '300px' : '200px'\n    });\n  }\n\n  toggleCorners() {\n    this.setState({\n      borderRadius: this.state.borderRadius === '0px' ? '50px' : '0px'\n    });\n  }\n\n  componentLifeCycleEvent(lifeCycleEvent, prevProps, prevState) {\n    var node = document.createElement(\"LI\");\n    var lifeCycleEventText = document.createTextNode(lifeCycleEvent);\n\n    if (prevProps) {\n      console.log('prevProps: ' + prevProps);\n    }\n\n    if (prevState) {\n      console.log('prevState: ' + prevState.backgroundColor);\n    } // if(prevProps) {\n    // \tlifeCycleEventText = lifeCycleEventText += document.createTextNode(prevProps);\n    // }\n    // if(prevState) {\n    // \tlifeCycleEventText = lifeCycleEventText += document.createTextNode(prevState);\n    // }\n\n\n    node.appendChild(lifeCycleEventText);\n    this.myRef.current.innerHTML += node.outerHTML;\n  }\n\n  componentWillMount() {\n    this.setState({\n      preMountEvents: 'componentWillMount called'\n    });\n  }\n\n  componentDidMount() {\n    this.componentLifeCycleEvent('componentDidMount called');\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    console.log(this.prevProps.children);\n\n    if (prevState !== this.state) {\n      this.componentLifeCycleEvent('componentDidUpdate called', prevProps, prevState);\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"gizmo\",\n      id: this.props.number,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        backgroundColor: this.state.backgroundColor,\n        width: this.state.width,\n        height: this.state.height,\n        borderRadius: this.state.borderRadius\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, this.props.number)), React.createElement(\"ul\", {\n      ref: this.myRef,\n      className: \"gizmo-details\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, this.state.preMountEvents)), React.createElement(GizmoControls, {\n      onChangeColor: this.toggleColor,\n      onChangeHeight: this.toggleHeight,\n      onChangeWidth: this.toggleWidth,\n      onChangeCorners: this.toggleCorners,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Dan/DansCode/dan-stevens.github.io/src/components/Gizmos/gizmo.js"],"names":["React","GizmoControls","Gizmo","Component","constructor","props","myRef","createRef","state","backgroundColor","width","height","borderRadius","preMountEvents","toggleColor","bind","toggleHeight","toggleWidth","toggleCorners","componentLifeCycleEvent","setState","lifeCycleEvent","prevProps","prevState","node","document","createElement","lifeCycleEventText","createTextNode","console","log","appendChild","current","innerHTML","outerHTML","componentWillMount","componentDidMount","componentDidUpdate","children","render","number"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {GizmoControls} from './gizmoControls';\n\nexport class Gizmo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.myRef = React.createRef();\n    this.state = {\n      backgroundColor: '#fff',\n      width: '200px',\n      height: '100px',\n      borderRadius: '0px',\n      preMountEvents: ''\n    };\n    this.toggleColor = this.toggleColor.bind(this);\n    this.toggleHeight = this.toggleHeight.bind(this);\n    this.toggleWidth = this.toggleWidth.bind(this);\n    this.toggleCorners = this.toggleCorners.bind(this);\n    this.componentLifeCycleEvent = this.componentLifeCycleEvent.bind(this);\n}\n\ntoggleColor() {\t\n\tthis.setState({\n\t\tbackgroundColor: this.state.backgroundColor === '#fff' ? '#000' : '#fff'\t\t\t\n\t});\n}\n\ntoggleHeight() {\n\tthis.setState({\n\t\theight: this.state.height === '100px' ? '200px' : '100px'\n\t});\n}\n\ntoggleWidth() {\n\tthis.setState({\n\t\twidth: this.state.width === '200px' ? '300px' : '200px'\n\t});\n}\n\ntoggleCorners() {\n\tthis.setState({\n\t\tborderRadius: this.state.borderRadius === '0px' ? '50px' : '0px'\n\t});\n}\n\ncomponentLifeCycleEvent(lifeCycleEvent, prevProps, prevState) {\n  var node = document.createElement(\"LI\");\n  var lifeCycleEventText = document.createTextNode(lifeCycleEvent);\n  if(prevProps) {\n  \tconsole.log('prevProps: ' + prevProps);\n  }\n  if(prevState) {\n  \tconsole.log('prevState: ' + prevState.backgroundColor);\n  }\n  \n \n  // if(prevProps) {\n  // \tlifeCycleEventText = lifeCycleEventText += document.createTextNode(prevProps);\n  // }\n  // if(prevState) {\n  // \tlifeCycleEventText = lifeCycleEventText += document.createTextNode(prevState);\n  // }\n  node.appendChild(lifeCycleEventText);\n  this.myRef.current.innerHTML += node.outerHTML;\n}\n\ncomponentWillMount() {\n\tthis.setState({\n\t\tpreMountEvents: 'componentWillMount called'\n\t});\n}\n\ncomponentDidMount() {\n  this.componentLifeCycleEvent('componentDidMount called');\n}\n\ncomponentDidUpdate(prevProps, prevState) {\n\tconsole.log(this.prevProps.children);\n\tif (prevState !== this.state) {\n\t\tthis.componentLifeCycleEvent('componentDidUpdate called', prevProps, prevState);\n\t}\n}\n\nrender() {\n\treturn (\n\t\t<div className='gizmo' id={this.props.number}>\n\t\t\t<div style={{\n\t\t\t\tbackgroundColor: this.state.backgroundColor,\n\t\t\t\twidth: this.state.width,\n\t\t\t\theight: this.state.height,\n\t\t\t\tborderRadius: this.state.borderRadius\n\t\t\t\t}}><span>{this.props.number}</span>\n\t\t\t</div>\n\t\t\t<ul ref={this.myRef} className='gizmo-details'>\n\t\t\t<li>{this.state.preMountEvents}</li>\n\t\t\t</ul>\n\n\t\t\t<GizmoControls \n\t\t\t\tonChangeColor={this.toggleColor}\n\t\t\t\tonChangeHeight={this.toggleHeight}\n\t\t\t\tonChangeWidth={this.toggleWidth}\n\t\t\t\tonChangeCorners={this.toggleCorners}\n\t\t\t/>\n\t\t</div>\n\t\t)\n\t}\n}"]},"metadata":{},"sourceType":"module"}