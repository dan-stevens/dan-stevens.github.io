{"ast":null,"code":"// Set of animations that create a new gizmo and set it down\nexport const craneOffScreen = animate => {\n  const element = document.getElementById('crane');\n  return cssTransitionToPromise(animate, element, 'margin-left', '-50%');\n};\nexport const craneIntoScreen = animate => {\n  const element = document.getElementById('crane');\n  return cssTransitionToPromise(animate, element, 'margin-left', '125px');\n};\nexport const gizmoIntoScreen = animate => {\n  const element = document.getElementById('gizmoId');\n  return cssTransitionToPromise(animate, element, 'left', '25px');\n};\nexport const frameIntoScreen = animate => {\n  const element = document.getElementById('frame');\n  return cssTransitionToPromise(animate, element, 'left', '25px');\n};\nexport const craneClawLeftOpen = animate => {\n  const element = document.getElementById('crane-claw-left');\n  return cssTransitionToPromise(animate, element, 'transform', 'rotate(45deg)');\n};\nexport const craneClawRightOpen = animate => {\n  const element = document.getElementById('crane-claw-right');\n  return cssTransitionToPromise(animate, element, 'transform', 'rotate(-45deg)');\n};\nexport const gizmoFall = animate => {\n  const element = document.getElementById('gizmoId');\n  return cssAnimationToPromise(animate, element, 'gizmoFall', [], {\n    property: 'bottom',\n    value: '0px'\n  });\n};\nexport const frameFall = animate => {\n  const element = document.getElementById('frame');\n  return cssAnimationToPromise(animate, element, 'frameFall', [frameFall], {\n    property: 'bottom',\n    value: '0px'\n  });\n};\nexport const dustClouds = animate => {\n  const element = document.getElementById(animate.element);\n  return cssAnimationToPromise(animate, element, 'dustClouds', ['dustClouds']);\n};\nexport const craneClawLeftClose = animate => {\n  const element = document.getElementById('crane-claw-left');\n  return cssTransitionToPromise(animate, element, 'transform', 'rotate(0deg)');\n};\nexport const craneClawRightClose = animate => {\n  const element = document.getElementById('crane-claw-right');\n  return cssTransitionToPromise(animate, element, 'transform', 'rotate(0deg)');\n};\nexport const craneReset = animate => {\n  const element = document.getElementById('crane');\n  return cssTransitionToPromise(animate, element, 'margin-left', '100px');\n}; //Set of animations that use the mechanic to remove frame parts\n\nexport const mechanicAlign1 = animate => {\n  const element = document.getElementById('gizmo-mechanic-outer');\n  return cssTransitionToPromise(animate, element, 'margin-left', '130px');\n};\nexport const mechanicRaise = animate => {\n  const element = document.getElementById('gizmo-mechanic-outer');\n  return cssAnimationToPromise(animate, element, 'mechanicRaise');\n};\nexport const mechanicShake = animate => {\n  const element = document.getElementById('gizmo-mechanic-upper');\n  return cssAnimationToPromise(animate, element, 'mechanicShake', ['mechanicShake']);\n};\nexport const mechanicAlign2 = animate => {\n  const element = document.getElementById('gizmo-mechanic-outer');\n  return cssTransitionToPromise(animate, element, 'margin-left', '10%');\n};\nexport const mechanicAlign3 = animate => {\n  const element = document.getElementById('gizmo-mechanic-outer');\n  return cssTransitionToPromise(animate, element, 'margin-left', '25%');\n};\nexport const mechanicLower = animate => {\n  const element = document.getElementById('gizmo-mechanic-outer');\n  return cssAnimationToPromise(animate, element, 'mechanicLower', ['mechanicRaise', 'mechanicLower']);\n};\nexport const frameLower = animate => {\n  const element = document.getElementById('frame');\n  return cssTransitionToPromise(animate, element, 'bottom', '-34%');\n};\nexport const mechanicOffScreen = animate => {\n  const element = document.getElementById('gizmo-mechanic-outer');\n  return cssTransitionToPromise(animate, element, 'margin-left', '-50%');\n};\nexport const frameOffScreen = animate => {\n  const element = document.getElementById('frame');\n  return cssTransitionToPromise(animate, element, 'left', '-100%');\n};\nexport const mechanicReset = animate => {\n  const element = document.getElementById('gizmo-mechanic-outer');\n  return cssTransitionToPromise(animate, element, 'margin-left', '20px');\n}; // Set of animations that pick up a gizmo, move it to the converter, drop it, and reset.\n//craneIntoScreen\n// export const craneClawLower = (animate) => {\n//   const element = document.getElementById('crane-line');\n//    return (cssTransitionToPromise(animate, element, 'height', '300px'))\n// }\n// export const craneClawLeftClose = (animate) => {\n//   const element = document.getElementById('crane-claw-left');\n//    return (cssTransitionToPromise(animate, element, 'transform', 'rotate(0deg)'))\n// }\n// export const craneClawRightClose = (animate) => {\n//   const element = document.getElementById('crane-claw-right');\n//    return (cssTransitionToPromise(animate, element, 'transform', 'rotate(0deg)'))\n// }\n// export const craneClawPickup = (animate) => {\n//   const element = document.getElementById('crane-line');\n//    return (cssTransitionToPromise(animate, element, 'height', '100%'))\n// }\n// export const gizmoPickup = (animate) => {\n//   const element = document.getElementById('gizmoId-' + animate.monsterNumber);\n//    return (cssTransitionToPromise(animate, element, 'bottom', 'calc(100% - 200px'))\n// }\n// export const craneToDrop = (animate) => {\n//   const element = document.getElementById('crane');\n//    return (cssTransitionToPromise(animate, element, 'margin-left', '70%'))\n// }\n// export const monsterToDrop = (animate) => {\n//   const element = document.getElementById('gizmoId-' + animate.monsterNumber);\n//    return (cssTransitionToPromise(animate, element, 'left', '50%'))\n// }\n// //craneClawOpen\n// export const monsterDrop = (animate) => {\n//   const element = document.getElementById('gizmoId-' + animate.monsterNumber);\n//    return (cssTransitionToPromise(animate, element, 'bottom', '0px'))\n// }\n//gizmoSpin\n//craneReset\n// Set of animations that set the gizmo, frame and lift down.\n\nexport const lowerLift = animate => {\n  const element = document.getElementById('gizmo-lift');\n  return cssTransitionToPromise(animate, element, 'margin-top', '200px');\n};\nexport const lowerVehicle = animate => {\n  const element = document.getElementById(animate.vehicleNumber);\n  return cssTransitionToPromise(animate, element, 'bottom', '-200px');\n};\nexport const rollOutVehicle = animate => {\n  const element = document.getElementById(animate.vehicleNumber);\n  return cssAnimationToPromise(animate, element, 'vehicle-rollout');\n};\nexport const resetLift = animate => {\n  const element = document.getElementById('gizmo-lift');\n  return cssTransitionToPromise(animate, element, 'margin-top', '0px');\n}; //Set of animations to swap out wheels\n\nexport const craneClawLower = animate => {\n  const element = document.getElementById('crane-line');\n  return cssTransitionToPromise(animate, element, 'height', '300px');\n};\nexport const elementLower = animate => {\n  const element = document.getElementById(animate.element);\n  return cssTransitionToPromise(animate, element, 'top', '300px');\n};\nexport const craneClawRaise = animate => {\n  const element = document.getElementById('crane-line');\n  return cssTransitionToPromise(animate, element, 'height', '100%');\n}; // Add / remove transition event listeners\n\nconst cssTransitionToPromise = (animate, element, property, value) => {\n  return new Promise(resolve => {\n    element.style[property] = value;\n\n    const transitionEnded = e => {\n      if (e.propertyName !== property) {\n        //console.log(e.propertyName);\n        //console.log(property);\n        return; //Wrong transition\n      } else {\n        //console.log('ok so im here with ' + animate.animationName + ' who is done');\n        element.removeEventListener('transitionend', transitionEnded);\n        resolve(animate);\n      }\n    };\n\n    element.addEventListener('transitionend', transitionEnded);\n  });\n}; // Add / remove animation event listeners\n\n\nconst cssAnimationToPromise = (animate, element, classToAdd, classToRemove, styleToAdd) => {\n  return new Promise(resolve => {\n    element.classList.add(classToAdd);\n\n    const animationEnded = e => {\n      if (!e.target.classList.contains(classToAdd)) {\n        //console.log(e.target.classList);\n        return; //Wrong animation\n      } else {\n        //console.log('else');\n        element.removeEventListener('animationend', animationEnded);\n        resolve(animate); //Remove a class after animation complete\n\n        if (classToRemove !== undefined) {\n          classToRemove.forEach(function (className) {\n            e.target.classList.remove(className);\n          });\n        } //Add a style at animation end\n\n\n        if (styleToAdd !== undefined) {\n          element.style[styleToAdd.property] = styleToAdd.value;\n        }\n      }\n    };\n\n    element.addEventListener('animationend', animationEnded);\n  });\n};","map":{"version":3,"sources":["/Dan/DansCode/dan-stevens.github.io/src/components/Gizmos/gizmoAnimations.js"],"names":["craneOffScreen","animate","element","document","getElementById","cssTransitionToPromise","craneIntoScreen","gizmoIntoScreen","frameIntoScreen","craneClawLeftOpen","craneClawRightOpen","gizmoFall","cssAnimationToPromise","property","value","frameFall","dustClouds","craneClawLeftClose","craneClawRightClose","craneReset","mechanicAlign1","mechanicRaise","mechanicShake","mechanicAlign2","mechanicAlign3","mechanicLower","frameLower","mechanicOffScreen","frameOffScreen","mechanicReset","lowerLift","lowerVehicle","vehicleNumber","rollOutVehicle","resetLift","craneClawLower","elementLower","craneClawRaise","Promise","resolve","style","transitionEnded","e","propertyName","removeEventListener","addEventListener","classToAdd","classToRemove","styleToAdd","classList","add","animationEnded","target","contains","undefined","forEach","className","remove"],"mappings":"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","sourcesContent":["// Set of animations that create a new gizmo and set it down\nexport const craneOffScreen = (animate) => {\n  const element = document.getElementById('crane');\n  return (cssTransitionToPromise(animate, element, 'margin-left', '-50%'));\n}\n\nexport const craneIntoScreen = (animate) => {\n  const element = document.getElementById('crane');\n  return (cssTransitionToPromise(animate, element, 'margin-left', '125px'));\n}\n\nexport const gizmoIntoScreen = (animate) => {\n  const element = document.getElementById('gizmoId');\n  return (cssTransitionToPromise(animate, element, 'left', '25px'));\n}\n\nexport const frameIntoScreen = (animate) => {\n  const element = document.getElementById('frame');\n  return (cssTransitionToPromise(animate, element, 'left', '25px'));\n}\n\nexport const craneClawLeftOpen = (animate) => {\n  const element = document.getElementById('crane-claw-left');\n   return (cssTransitionToPromise(animate, element, 'transform', 'rotate(45deg)'));\n}\n\nexport const craneClawRightOpen = (animate) => {\n  const element = document.getElementById('crane-claw-right');\n   return (cssTransitionToPromise(animate, element, 'transform', 'rotate(-45deg)'));\n}\n\nexport const gizmoFall = (animate) => {\n  const element = document.getElementById('gizmoId');\n  return (cssAnimationToPromise(animate, element, 'gizmoFall', [], {property: 'bottom', value: '0px'}));\n}\n\nexport const frameFall = (animate) => {\n  const element = document.getElementById('frame');\n  return (cssAnimationToPromise(animate, element, 'frameFall', [frameFall], {property: 'bottom', value: '0px'}));\n}\n\n\nexport const dustClouds = (animate) => {\n  const element = document.getElementById(animate.element);\n  return (cssAnimationToPromise(animate, element, 'dustClouds', ['dustClouds']));\n}\n\nexport const craneClawLeftClose = (animate) => {\n  const element = document.getElementById('crane-claw-left');\n   return (cssTransitionToPromise(animate, element, 'transform', 'rotate(0deg)'))\n}\n\nexport const craneClawRightClose = (animate) => {\n  const element = document.getElementById('crane-claw-right');\n   return (cssTransitionToPromise(animate, element, 'transform', 'rotate(0deg)'))\n}\n\nexport const craneReset = (animate) => {\n  const element = document.getElementById('crane');\n  return (cssTransitionToPromise(animate, element, 'margin-left', '100px'));\n}\n\n\n\n//Set of animations that use the mechanic to remove frame parts\nexport const mechanicAlign1 = (animate) => {\n  const element = document.getElementById('gizmo-mechanic-outer');\n   return (cssTransitionToPromise(animate, element, 'margin-left', '130px'))\n}\n\nexport const mechanicRaise = (animate) => {\n  const element = document.getElementById('gizmo-mechanic-outer');\n  return (cssAnimationToPromise(animate, element, 'mechanicRaise'))\n}\n\nexport const mechanicShake = (animate) => {\n  const element = document.getElementById('gizmo-mechanic-upper');\n  return (cssAnimationToPromise(animate, element, 'mechanicShake', ['mechanicShake']))\n}\n\nexport const mechanicAlign2 = (animate) => {\n  const element = document.getElementById('gizmo-mechanic-outer');\n   return (cssTransitionToPromise(animate, element, 'margin-left', '10%'))\n}\n\nexport const mechanicAlign3 = (animate) => {\n  const element = document.getElementById('gizmo-mechanic-outer');\n   return (cssTransitionToPromise(animate, element, 'margin-left', '25%'))\n}\n\nexport const mechanicLower = (animate) => {\n  const element = document.getElementById('gizmo-mechanic-outer');\n  return (cssAnimationToPromise(animate, element, 'mechanicLower', ['mechanicRaise', 'mechanicLower']))\n}\n\nexport const frameLower = (animate) => {\n  const element = document.getElementById('frame');\n   return (cssTransitionToPromise(animate, element, 'bottom', '-34%'))\n}\n\nexport const mechanicOffScreen = (animate) => {\n  const element = document.getElementById('gizmo-mechanic-outer');\n   return (cssTransitionToPromise(animate, element, 'margin-left', '-50%'))\n}\n\nexport const frameOffScreen = (animate) => {\n  const element = document.getElementById('frame');\n   return (cssTransitionToPromise(animate, element, 'left', '-100%'))\n}\n\nexport const mechanicReset = (animate) => {\n  const element = document.getElementById('gizmo-mechanic-outer');\n   return (cssTransitionToPromise(animate, element, 'margin-left', '20px'))\n}\n\n// Set of animations that pick up a gizmo, move it to the converter, drop it, and reset.\n\n//craneIntoScreen\n\n// export const craneClawLower = (animate) => {\n//   const element = document.getElementById('crane-line');\n//    return (cssTransitionToPromise(animate, element, 'height', '300px'))\n// }\n\n// export const craneClawLeftClose = (animate) => {\n//   const element = document.getElementById('crane-claw-left');\n//    return (cssTransitionToPromise(animate, element, 'transform', 'rotate(0deg)'))\n// }\n\n// export const craneClawRightClose = (animate) => {\n//   const element = document.getElementById('crane-claw-right');\n//    return (cssTransitionToPromise(animate, element, 'transform', 'rotate(0deg)'))\n// }\n\n// export const craneClawPickup = (animate) => {\n//   const element = document.getElementById('crane-line');\n//    return (cssTransitionToPromise(animate, element, 'height', '100%'))\n// }\n\n// export const gizmoPickup = (animate) => {\n//   const element = document.getElementById('gizmoId-' + animate.monsterNumber);\n//    return (cssTransitionToPromise(animate, element, 'bottom', 'calc(100% - 200px'))\n// }\n\n// export const craneToDrop = (animate) => {\n//   const element = document.getElementById('crane');\n//    return (cssTransitionToPromise(animate, element, 'margin-left', '70%'))\n// }\n\n// export const monsterToDrop = (animate) => {\n//   const element = document.getElementById('gizmoId-' + animate.monsterNumber);\n//    return (cssTransitionToPromise(animate, element, 'left', '50%'))\n// }\n\n// //craneClawOpen\n\n// export const monsterDrop = (animate) => {\n//   const element = document.getElementById('gizmoId-' + animate.monsterNumber);\n//    return (cssTransitionToPromise(animate, element, 'bottom', '0px'))\n// }\n\n//gizmoSpin\n\n//craneReset\n\n\n// Set of animations that set the gizmo, frame and lift down.\n\nexport const lowerLift = (animate) => {\n  const element = document.getElementById('gizmo-lift');\n  return (cssTransitionToPromise(animate, element, 'margin-top', '200px'))\n}\n\nexport const lowerVehicle = (animate) => {\n  const element = document.getElementById(animate.vehicleNumber);\n  return (cssTransitionToPromise(animate, element, 'bottom', '-200px'))\n}\n\nexport const rollOutVehicle = (animate) => {\n  const element = document.getElementById(animate.vehicleNumber);\n  return (cssAnimationToPromise(animate, element, 'vehicle-rollout'))\n}\n\nexport const resetLift = (animate) => {\n  const element = document.getElementById('gizmo-lift');\n  return (cssTransitionToPromise(animate, element, 'margin-top', '0px'))\n}\n\n\n//Set of animations to swap out wheels\n\nexport const craneClawLower = (animate) => {\n  const element = document.getElementById('crane-line');\n   return (cssTransitionToPromise(animate, element, 'height', '300px'))\n}\n\nexport const elementLower = (animate) => {\n  const element = document.getElementById(animate.element);\n   return (cssTransitionToPromise(animate, element, 'top', '300px'))\n}\n\nexport const craneClawRaise = (animate) => {\n  const element = document.getElementById('crane-line');\n   return (cssTransitionToPromise(animate, element, 'height', '100%'))\n}\n\n// Add / remove transition event listeners\nconst cssTransitionToPromise = (animate, element, property, value) => {\n\nreturn (\n      new Promise(resolve => {\n        element.style[property] = value;\n        const transitionEnded = e => {\n        if (e.propertyName !== property) {\n          //console.log(e.propertyName);\n          //console.log(property);\n        return; //Wrong transition\n        }\n        else { \n          //console.log('ok so im here with ' + animate.animationName + ' who is done');\n        element.removeEventListener('transitionend', transitionEnded);\n          resolve(animate);\n        }\n      }\n    element.addEventListener('transitionend', transitionEnded);\n    })\n  )\n}\n\n// Add / remove animation event listeners\nconst cssAnimationToPromise = (animate, element, classToAdd, classToRemove, styleToAdd) => {\nreturn (\n      new Promise(resolve => {\n        element.classList.add(classToAdd);\n        const animationEnded = e => {\n        if (!e.target.classList.contains(classToAdd)) {\n          //console.log(e.target.classList);\n        return; //Wrong animation\n        }\n        else { \n          //console.log('else');\n        element.removeEventListener('animationend', animationEnded);\n          resolve(animate);\n          //Remove a class after animation complete\n          if (classToRemove !== undefined) {\n            classToRemove.forEach(function(className) {\n              e.target.classList.remove(className);\n            });              \n          }      \n          //Add a style at animation end\n          if (styleToAdd !== undefined) {\n            element.style[styleToAdd.property] = styleToAdd.value;\n          }\n        }\n      }\n    element.addEventListener('animationend', animationEnded);\n    })\n  )\n}"]},"metadata":{},"sourceType":"module"}