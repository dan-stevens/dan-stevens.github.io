{"ast":null,"code":"var _jsxFileName = \"/Dan/DansCode/dan-stevens.github.io/src/components/Gizmos/gizmoSection.js\";\nimport React from 'react';\nimport { Gizmo } from './gizmo';\nimport { Crane } from './crane';\nimport { Monster } from './monster';\nimport './gizmo.css';\nimport './monster.css';\nexport class GizmoSection extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gizmoCount: 0,\n      gizmoArray: [],\n      animationQueue: [],\n      animationQueuePriority: 0,\n      currentAnimation: [],\n      monsterCount: 0,\n      monsterArray: []\n    };\n\n    this.createGizmo = () => {\n      this.setState({\n        gizmoCount: this.state.gizmoCount + 1,\n        gizmoArray: [...this.state.gizmoArray, React.createElement(Gizmo, {\n          key: this.state.gizmoCount,\n          number: this.state.gizmoCount,\n          onFilterOut: this.convertMonster,\n          onCreateMonster: this.createMonster,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 30\n          },\n          __self: this\n        })]\n      });\n    };\n\n    this.convertMonster = this.convertMonster.bind(this);\n    this.removeMonster = this.removeMonster.bind(this);\n    this.createMonster = this.createMonster.bind(this);\n    this.monsterRef = React.createRef();\n  }\n\n  convertMonster(monsterNumber, monsterOffsetTop) {\n    this.setState({\n      animationQueue: [{\n        animationName: 'craneToPickup',\n        animationSequence: craneToPickup,\n        priority: 1\n      }, {\n        animationName: 'craneClawLower',\n        animationSequence: craneClawLower,\n        priority: 2,\n        monsterOffsetTop: monsterOffsetTop\n      }, {\n        animationName: 'craneClawGrab',\n        animationSequence: craneClawGrab,\n        priority: 3,\n        monsterOffsetTop: monsterOffsetTop\n      }, {\n        animationName: 'craneClawPickup',\n        animationSequence: craneClawPickup,\n        priority: 4\n      }, {\n        animationName: 'monsterPickup',\n        animationSequence: monsterPickup,\n        priority: 4,\n        monsterNumber: monsterNumber,\n        monsterOffsetTop: monsterOffsetTop\n      }, {\n        animationName: 'craneToDrop',\n        animationSequence: craneToDrop,\n        priority: 5,\n        monsterNumber: monsterNumber,\n        monsterOffsetTop: monsterOffsetTop\n      }, {\n        animationName: 'monsterToDrop',\n        animationSequence: monsterToDrop,\n        priority: 5,\n        monsterNumber: monsterNumber,\n        monsterOffsetTop: monsterOffsetTop\n      }, {\n        animationName: 'craneClawDrop',\n        animationSequence: craneClawDrop,\n        priority: 6\n      }, {\n        animationName: 'monsterSpin',\n        animationSequence: monsterSpin,\n        priority: 7,\n        monsterNumber: monsterNumber\n      }, {\n        animationName: 'monsterDrop',\n        animationSequence: monsterDrop,\n        priority: 7,\n        monsterNumber: monsterNumber,\n        monsterRemove: true\n      }, {\n        animationName: 'craneReset',\n        animationSequence: craneReset,\n        priority: 8\n      }]\n    });\n  }\n\n  removeMonster(monsterNumber) {\n    this.setState({\n      gizmoArray: this.state.gizmoArray.filter(function (item) {\n        return item.props.number !== monsterNumber;\n      })\n    });\n  }\n\n  createMonster(monsterState) {\n    console.log(JSON.stringify(monsterState));\n    this.setState({\n      monsterCount: this.state.monsterCount + 1,\n      monsterArray: [...this.state.monsterArray, React.createElement(Monster, {\n        key: this.state.monsterCount,\n        id: monsterState.number,\n        species: monsterState.species,\n        ref: this.monsterRef,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      })]\n    });\n    this.monsterRef.removeEventListener('transitionend', this.destroyMonster);\n  }\n\n  destroyMonster(element) {\n    conslole.log(element);\n  } //current animation's done\n\n\n  currentAnimationFinished(animate) {\n    //Unmount this component\n    if (animate.monsterRemove) {\n      this.removeMonster(animate.monsterNumber);\n    }\n\n    this.setState({\n      animationQueue: this.state.animationQueue.filter(function (item) {\n        return item !== animate;\n      }),\n      currentAnimation: this.state.currentAnimation.filter(function (item) {\n        return item !== animate;\n      })\n    }); //Reset animation queue priority\n\n    if (this.state.animationQueue.length === 0) {\n      this.setState({\n        animationQueuePriority: 0\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    //We have an updated animation queue\n    if (prevState.animationQueue !== this.state.animationQueue && this.state.animationQueue.length !== 0 && this.state.currentAnimation.length === 0) {\n      let animationPriority = this.state.animationQueuePriority;\n      animationPriority++;\n      let sendToCurrentAnimation = [];\n      this.state.animationQueue.forEach(function (animation, index) {\n        if (animation.priority === animationPriority) {\n          sendToCurrentAnimation.push(animation);\n        }\n      }, this);\n      this.setState({\n        currentAnimation: sendToCurrentAnimation,\n        animationQueuePriority: animationPriority\n      });\n    } //We have current animation(s)\n\n\n    if (prevState.currentAnimation.length < this.state.currentAnimation.length && this.state.currentAnimation.length !== 0) {\n      this.state.currentAnimation.forEach(function (animate, index) {\n        animate.animationSequence(animate).then(resolve => this.currentAnimationFinished(resolve));\n      }, this);\n    } //We have a new monster to animate\n\n\n    if (prevState.monsterArray !== this.state.monsterArray) {\n      console.log('time to move a monster');\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"gizmos-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, React.createElement(Crane, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }), React.createElement(\"section\", {\n      className: \"gizmo-button-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, React.createElement(GizmoButton, {\n      onClick: this.createGizmo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    })), React.createElement(\"section\", {\n      className: \"gizmo-creater\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, this.state.gizmoArray), React.createElement(\"section\", {\n      className: \"gizmo-converter\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, \"need to design a converter\")), React.createElement(\"section\", {\n      className: \"gizmo-result\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, \"need to design a gizmo result\"), this.state.monsterArray));\n  }\n\n}\n\nconst craneToPickup = animate => {\n  const element = document.getElementById('crane');\n  return cssTransitionToPromise(animate, element, 'margin-left', '38%');\n};\n\nconst craneClawLower = animate => {\n  const element = document.getElementById('crane-claw');\n  return cssTransitionToPromise(animate, element, 'top', animate.monsterOffsetTop + 'px');\n};\n\nconst craneClawGrab = animate => {\n  const element = document.getElementById('crane-claw');\n  return cssTransitionToPromise(animate, element, 'background-color', 'red');\n};\n\nconst craneClawPickup = animate => {\n  const element = document.getElementById('crane-claw');\n  return cssTransitionToPromise(animate, element, 'top', 0);\n};\n\nconst monsterPickup = animate => {\n  const element = document.getElementById('gizmoId-' + animate.monsterNumber);\n  return cssTransitionToPromise(animate, element, 'top', -animate.monsterOffsetTop + 'px');\n};\n\nconst craneToDrop = animate => {\n  const element = document.getElementById('crane');\n  return cssTransitionToPromise(animate, element, 'margin-left', '70.5%');\n};\n\nconst monsterToDrop = animate => {\n  const element = document.getElementById('gizmoId-' + animate.monsterNumber);\n  return cssTransitionToPromise(animate, element, 'left', '50%');\n};\n\nconst craneClawDrop = animate => {\n  const element = document.getElementById('crane-claw');\n  return cssTransitionToPromise(animate, element, 'background-color', 'green');\n};\n\nconst monsterDrop = animate => {\n  const element = document.getElementById('gizmoId-' + animate.monsterNumber);\n  return cssTransitionToPromise(animate, element, 'top', '100px');\n};\n\nconst monsterSpin = animate => {\n  const element = document.getElementById('gizmoId-' + animate.monsterNumber);\n  return cssTransitionToPromise(animate, element, 'transform', 'rotate(180deg)');\n};\n\nconst craneReset = animate => {\n  const element = document.getElementById('crane');\n  return cssTransitionToPromise(animate, element, 'margin-left', 'calc(-25% - 5px)');\n};\n\nconst cssTransitionToPromise = (animate, element, property, value) => {\n  return new Promise(resolve => {\n    element.style[property] = value;\n\n    const transitionEnded = e => {\n      if (e.propertyName !== property) {\n        return; //Wrong transition\n      } else {\n        element.removeEventListener('transitionend', transitionEnded);\n        resolve(animate);\n      }\n    };\n\n    element.addEventListener('transitionend', transitionEnded);\n  });\n};\n\nclass GizmoButton extends React.Component {\n  render() {\n    return React.createElement(\"button\", {\n      onClick: this.props.onClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }, \"Make a Gizmo\");\n  }\n\n}","map":{"version":3,"sources":["/Dan/DansCode/dan-stevens.github.io/src/components/Gizmos/gizmoSection.js"],"names":["React","Gizmo","Crane","Monster","GizmoSection","Component","constructor","props","state","gizmoCount","gizmoArray","animationQueue","animationQueuePriority","currentAnimation","monsterCount","monsterArray","createGizmo","setState","convertMonster","createMonster","bind","removeMonster","monsterRef","createRef","monsterNumber","monsterOffsetTop","animationName","animationSequence","craneToPickup","priority","craneClawLower","craneClawGrab","craneClawPickup","monsterPickup","craneToDrop","monsterToDrop","craneClawDrop","monsterSpin","monsterDrop","monsterRemove","craneReset","filter","item","number","monsterState","console","log","JSON","stringify","species","removeEventListener","destroyMonster","element","conslole","currentAnimationFinished","animate","length","componentDidUpdate","prevProps","prevState","animationPriority","sendToCurrentAnimation","forEach","animation","index","push","then","resolve","render","document","getElementById","cssTransitionToPromise","property","value","Promise","style","transitionEnded","e","propertyName","addEventListener","GizmoButton","onClick"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Gizmo} from './gizmo';\nimport {Crane} from './crane';\nimport {Monster} from './monster';\nimport './gizmo.css';\nimport './monster.css';\n\nexport class GizmoSection extends React.Component {\n  constructor(props) {\n\tsuper(props);\n\tthis.convertMonster = this.convertMonster.bind(this);\n\tthis.removeMonster = this.removeMonster.bind(this);\n\tthis.createMonster = this.createMonster.bind(this);\n\tthis.monsterRef = React.createRef();\n  }\n  state = {\n    gizmoCount: 0,\n    gizmoArray: [],\n    animationQueue: [],\n    animationQueuePriority: 0,\n    currentAnimation: [],\n    monsterCount: 0,\n    monsterArray: []\n  }\n\n\tcreateGizmo = () => {\n\t\tthis.setState({\n\t\t\tgizmoCount : this.state.gizmoCount + 1,\n\t\t\tgizmoArray: [...this.state.gizmoArray, \n\t\t\t  <Gizmo \n\t\t\t  key={this.state.gizmoCount} \n\t\t\t  number={this.state.gizmoCount} \n\t\t\t  onFilterOut={this.convertMonster} \n\t\t\t  onCreateMonster={this.createMonster}\n\t\t\t  />\n\t\t\t]\n\t\t});\n\t}\n\n\tconvertMonster(monsterNumber, monsterOffsetTop) {\n\t\tthis.setState({\n\t\t\tanimationQueue: [\n\t\t\t  {\n\t\t\t  \tanimationName: 'craneToPickup',\n\t\t\t  \tanimationSequence: craneToPickup,\n\t\t\t  \tpriority: 1\n\t\t\t  },\n\t\t\t  {\n\t\t\t  \tanimationName: 'craneClawLower',\n\t\t\t  \tanimationSequence: craneClawLower,\n\t\t\t  \tpriority: 2,\n\t\t\t  \tmonsterOffsetTop: monsterOffsetTop\n\t\t\t  },\n\t\t\t  {\n\t\t\t  \tanimationName: 'craneClawGrab',\n\t\t\t  \tanimationSequence: craneClawGrab,\n\t\t\t  \tpriority: 3,\n\t\t\t  \tmonsterOffsetTop: monsterOffsetTop\n\t\t\t  },\n\t\t\t  {\n\t\t\t  \tanimationName: 'craneClawPickup',\n\t\t\t  \tanimationSequence: craneClawPickup,\n\t\t\t  \tpriority: 4\n\t\t\t  },\n\t\t\t  {\n\t\t\t  \tanimationName: 'monsterPickup',\n\t\t\t  \tanimationSequence: monsterPickup,\n\t\t\t  \tpriority: 4,\n\t\t\t  \tmonsterNumber: monsterNumber,\n\t\t\t  \tmonsterOffsetTop: monsterOffsetTop\n\t\t\t  },\n\t\t\t  {\n\t\t\t  \tanimationName: 'craneToDrop',\n\t\t\t  \tanimationSequence: craneToDrop,\n\t\t\t  \tpriority: 5,\n\t\t\t  \tmonsterNumber: monsterNumber,\n\t\t\t  \tmonsterOffsetTop: monsterOffsetTop\n\t\t\t  },\n\t\t\t  {\n\t\t\t  \tanimationName: 'monsterToDrop',\n\t\t\t  \tanimationSequence: monsterToDrop,\n\t\t\t  \tpriority: 5,\n\t\t\t  \tmonsterNumber: monsterNumber,\n\t\t\t  \tmonsterOffsetTop: monsterOffsetTop\n\t\t\t  },\n\t\t\t  {\n\t\t\t  \tanimationName: 'craneClawDrop',\n\t\t\t  \tanimationSequence: craneClawDrop,\n\t\t\t  \tpriority: 6\n\t\t\t  },\n\t\t\t  {\n\t\t\t  \tanimationName: 'monsterSpin',\n\t\t\t  \tanimationSequence: monsterSpin,\n\t\t\t  \tpriority: 7,\n\t\t\t  \tmonsterNumber: monsterNumber\n\t\t\t  },\n\t\t\t  {\n\t\t\t  \tanimationName: 'monsterDrop',\n\t\t\t  \tanimationSequence: monsterDrop,\n\t\t\t  \tpriority: 7,\n\t\t\t  \tmonsterNumber: monsterNumber,\n\t\t\t  \tmonsterRemove: true\n\t\t\t  },\n\t\t\t  {\n\t\t\t  \tanimationName: 'craneReset',\n\t\t\t  \tanimationSequence: craneReset,\n\t\t\t  \tpriority: 8\n\t\t\t  }\n\t\t\t]\n\t\t});\n\t}\n\n\tremoveMonster(monsterNumber) {\n\t\tthis.setState({\n\t\t\tgizmoArray : this.state.gizmoArray.filter(function(item) {\n\t\t\t\treturn item.props.number !== monsterNumber\n\t\t\t})\n\t\t});\n\t}\n\n\tcreateMonster(monsterState) {\n\t\tconsole.log(JSON.stringify(monsterState));\n\t\tthis.setState({\n\t\t\tmonsterCount : this.state.monsterCount + 1,\n\t\t\tmonsterArray: [...this.state.monsterArray, \n\t\t\t  <Monster \n\t\t\t    key={this.state.monsterCount} \n\t\t\t    id={monsterState.number}\n\t\t\t    species={monsterState.species} \n\t\t\t    ref={this.monsterRef}\n\t\t\t  />\n\t\t\t]\n\t\t});\n\n\t\tthis.monsterRef.removeEventListener('transitionend', this.destroyMonster);\n\t}\n\n\tdestroyMonster(element) {\n\t\tconslole.log(element);\n\t}\n\n\t//current animation's done\n\tcurrentAnimationFinished(animate) {\n\n\t\t//Unmount this component\n\t\tif (animate.monsterRemove) {\n\t\t\tthis.removeMonster(animate.monsterNumber);\n\t\t}\n\n\n\t\tthis.setState({\t\n\n\t\t\tanimationQueue: this.state.animationQueue.filter(function(item) {\n\t\t\t\treturn item !== animate\n\t\t\t}),\n\t\t\tcurrentAnimation: this.state.currentAnimation.filter(function(item) {\n\t\t\t\treturn item !== animate\n\t\t\t}),\n\t\t});\n\n\t\t//Reset animation queue priority\n\t\tif (this.state.animationQueue.length === 0) {\n\t\t\tthis.setState({\n\t\t\t\tanimationQueuePriority: 0\n\t\t\t})\t\t\t\n\t\t}\n\t}\n\n\tcomponentDidUpdate(prevProps, prevState) {\n\t\t//We have an updated animation queue\n\t\tif ((prevState.animationQueue !== this.state.animationQueue \n\t\t\t&& this.state.animationQueue.length !== 0\n\t\t\t&& this.state.currentAnimation.length === 0\n\t\t)) {\n\n\t\t\tlet animationPriority = this.state.animationQueuePriority;\n\n\t\t\tanimationPriority++;\n\n\t\t\tlet sendToCurrentAnimation = [];\n\t\t\tthis.state.animationQueue.forEach(function(animation, index) { \n\t\t\t\tif (animation.priority === animationPriority) {\t\t\t\t\n\t\t\t\t\tsendToCurrentAnimation.push(animation);\n\t\t\t\t}\t\t\t\t\n\t\t\t}, this);\n\n\t\t\tthis.setState({\n\t\t\t  currentAnimation: sendToCurrentAnimation,\t\n\t\t\t  animationQueuePriority: animationPriority  \n\t\t\t});\n\t\t}\t\t\n\n\t\t//We have current animation(s)\n\t\tif (prevState.currentAnimation.length < this.state.currentAnimation.length && this.state.currentAnimation.length !== 0) {\t\t\t\n\t\t\t\tthis.state.currentAnimation.forEach(function(animate, index) {\n\t\t\t\t\tanimate.animationSequence(animate).then((resolve) => this.currentAnimationFinished(resolve));\t\t\t\n\t\t\t\t}, this);\n\t\t}\t\n\n\t\t//We have a new monster to animate\n\t\tif (prevState.monsterArray !== this.state.monsterArray) {\n\t\t\tconsole.log('time to move a monster');\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t  <div className='gizmos-container'>\n\t\t  \t<Crane />\n\t\t    <section className=\"gizmo-button-container\">\n\t\t      <GizmoButton onClick={this.createGizmo} />\n\t\t    </section>\n\t\t\t  <section className=\"gizmo-creater\">\n\t\t\t\t{this.state.gizmoArray}\n\t\t\t</section>\n            <section className=\"gizmo-converter\">\n             <p>need to design a converter</p>\n            </section>\n            <section className=\"gizmo-result\">\n             <p>need to design a gizmo result</p>\n             {this.state.monsterArray}\n            </section>\n\t      </div>\n\t\t)\n\t}\n}\n\n\nconst craneToPickup = (animate) => {\n  const element = document.getElementById('crane');\n  return (cssTransitionToPromise(animate, element, 'margin-left', '38%'))\n}\n\nconst craneClawLower = (animate) => {\n  const element = document.getElementById('crane-claw');\n   return (cssTransitionToPromise(animate, element, 'top', animate.monsterOffsetTop + 'px'))\n}\n\nconst craneClawGrab = (animate) => {\n  const element = document.getElementById('crane-claw');\n   return (cssTransitionToPromise(animate, element, 'background-color', 'red'))\n}\n\n\nconst craneClawPickup = (animate) => {\n\tconst element = document.getElementById('crane-claw');\n   return (cssTransitionToPromise(animate, element, 'top', 0))\n}\n\nconst monsterPickup = (animate) => {\n\tconst element = document.getElementById('gizmoId-' + animate.monsterNumber);\n   return (cssTransitionToPromise(animate, element, 'top', - animate.monsterOffsetTop + 'px'))\n}\n\nconst craneToDrop = (animate) => {\n\tconst element = document.getElementById('crane');\n   return (cssTransitionToPromise(animate, element, 'margin-left', '70.5%'))\n}\n\nconst monsterToDrop = (animate) => {\n\tconst element = document.getElementById('gizmoId-' + animate.monsterNumber);\n   return (cssTransitionToPromise(animate, element, 'left', '50%'))\n}\n\nconst craneClawDrop = (animate) => {\n\tconst element = document.getElementById('crane-claw');\n   return (cssTransitionToPromise(animate, element, 'background-color', 'green'))\n}\n\nconst monsterDrop = (animate) => {\n\tconst element = document.getElementById('gizmoId-' + animate.monsterNumber);\n   return (cssTransitionToPromise(animate, element, 'top', '100px'))\n}\n\nconst monsterSpin = (animate) => {\n\tconst element = document.getElementById('gizmoId-' + animate.monsterNumber);\n   return (cssTransitionToPromise(animate, element, 'transform', 'rotate(180deg)'))\n}\n\nconst craneReset = (animate) => {\n  const element = document.getElementById('crane');\n  return (cssTransitionToPromise(animate, element, 'margin-left', 'calc(-25% - 5px)'))\n}\n\nconst cssTransitionToPromise = (animate, element, property, value) => {\nreturn (\n\t  new Promise(resolve => {\n      element.style[property] = value;\n      const transitionEnded = e => {\n      if (e.propertyName !== property) {\n    \treturn; //Wrong transition\n      }\n      else { \n    \telement.removeEventListener('transitionend', transitionEnded);\n  \t    resolve(animate);\n      }\n    }\n    element.addEventListener('transitionend', transitionEnded);\n    })\n  )\n}\n\nclass GizmoButton extends React.Component {\n  render() {\n    \n    return (\n      <button onClick={this.props.onClick}>Make a Gizmo</button>\n    ) \n\n  }\n}"]},"metadata":{},"sourceType":"module"}