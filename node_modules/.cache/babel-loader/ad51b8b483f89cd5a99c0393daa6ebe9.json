{"ast":null,"code":"var _jsxFileName = \"/Dan/DansCode/dan-stevens.github.io/src/components/Gizmos/gizmo.js\";\nimport React from 'react';\nimport { GizmoControls } from './gizmoControls';\nexport class Gizmo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.monsterDOMRef = React.createRef(); // Coordinates in DOM used for animation\n\n    this.state = {\n      color: '#fff',\n      width: '200px',\n      species: 'robot',\n      borderRadius: '0px',\n      preMountEvents: ''\n    };\n    this.toggleWidth = this.toggleWidth.bind(this);\n    this.toggleCorners = this.toggleCorners.bind(this);\n    this.toggleColor = this.toggleColor.bind(this);\n    this.componentLifeCycleEvent = this.componentLifeCycleEvent.bind(this);\n    this.monsterSelected = this.monsterSelected.bind(this);\n  }\n\n  toggleColor() {\n    const possibleBlockColors = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'];\n    const randomColor = Math.floor(Math.random() * possibleBlockColors.length);\n    this.setState({\n      color: possibleBlockColors[randomColor]\n    });\n  }\n\n  toggleWidth() {\n    this.setState({\n      width: this.state.width === '200px' ? '300px' : '200px'\n    });\n  }\n\n  toggleCorners() {\n    this.setState({\n      borderRadius: this.state.borderRadius === '0px' ? '50px' : '0px'\n    });\n  }\n\n  monsterSelected() {\n    this.props.onFilterOut(this.props.number, this.monsterDOMRef.current.offsetTop);\n  }\n\n  componentLifeCycleEvent(lifeCycleEvent, prevProps, prevState) {\n    document.getElementById('gizmo-updates-screen').prepend(lifeCycleEvent);\n  }\n\n  componentWillMount() {\n    this.setState({\n      preMountEvents: 'componentWillMount called'\n    });\n  }\n\n  componentDidMount() {\n    this.componentLifeCycleEvent('componentDidMount called');\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState !== this.state) {\n      this.componentLifeCycleEvent('componentDidUpdate called', prevProps.number, prevState);\n    }\n\n    if (prevProps.number !== this.props.number) {\n      console.log('theres a difference here');\n      console.log('prevProps:');\n      console.log(prevProps);\n      console.log('this.props');\n      console.log(this.props);\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.onCreateMonster(this.state, this.props);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"gizmo\",\n      id: 'gizmoId-' + this.props.number,\n      ref: this.monsterDOMRef,\n      style: {\n        top: this.state.monsterOffsetTop,\n        left: this.state.monsteroffsetLeft\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        backgroundColor: this.state.color,\n        width: this.state.width,\n        borderRadius: this.state.borderRadius\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"My ref prop: \", this.props.number))) //<div className='gizmo-bucket' />\n    // <GizmoControls \n    // \tonChangeColor={this.toggleColor}\n    // \tonChangeHeight={this.toggleHeight}\n    // \tonChangeWidth={this.toggleWidth}\n    // \tonChangeCorners={this.toggleCorners}\n    //     onBuildMonster={this.monsterSelected}\n    // />\n    ;\n  }\n\n}","map":{"version":3,"sources":["/Dan/DansCode/dan-stevens.github.io/src/components/Gizmos/gizmo.js"],"names":["React","GizmoControls","Gizmo","Component","constructor","props","monsterDOMRef","createRef","state","color","width","species","borderRadius","preMountEvents","toggleWidth","bind","toggleCorners","toggleColor","componentLifeCycleEvent","monsterSelected","possibleBlockColors","randomColor","Math","floor","random","length","setState","onFilterOut","number","current","offsetTop","lifeCycleEvent","prevProps","prevState","document","getElementById","prepend","componentWillMount","componentDidMount","componentDidUpdate","console","log","componentWillUnmount","onCreateMonster","render","top","monsterOffsetTop","left","monsteroffsetLeft","backgroundColor"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {GizmoControls} from './gizmoControls';\n\nexport class Gizmo extends React.Component {\n  constructor(props) {\n    super(props);    \n    this.monsterDOMRef = React.createRef(); // Coordinates in DOM used for animation\n    this.state = {\n      color: '#fff',\n      width: '200px',\n      species: 'robot',\n      borderRadius: '0px',\n      preMountEvents: ''\n    };\n    this.toggleWidth = this.toggleWidth.bind(this);\n    this.toggleCorners = this.toggleCorners.bind(this);\n    this.toggleColor = this.toggleColor.bind(this);\n    this.componentLifeCycleEvent = this.componentLifeCycleEvent.bind(this);\n    this.monsterSelected = this.monsterSelected.bind(this);\n  }\n\n  toggleColor() {\n  \tconst possibleBlockColors = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'];\n  \tconst randomColor = Math.floor(Math.random() * possibleBlockColors.length);\n    this.setState({\n      color: possibleBlockColors[randomColor]\n    });\n  }\n\n  toggleWidth() {\n\tthis.setState({\n\t\twidth: this.state.width === '200px' ? '300px' : '200px'\n\t});\n  }\n\n  toggleCorners() {\n\tthis.setState({\n\t\tborderRadius: this.state.borderRadius === '0px' ? '50px' : '0px'\n\t});\n  }\n\n  monsterSelected() {\n    this.props.onFilterOut(this.props.number, this.monsterDOMRef.current.offsetTop);\n  }\n\n  componentLifeCycleEvent(lifeCycleEvent, prevProps, prevState) {\n    document.getElementById('gizmo-updates-screen').prepend(lifeCycleEvent);\n  }\n\n  componentWillMount() {\n\tthis.setState({\n\t\tpreMountEvents: 'componentWillMount called'\n \t});\n  }\n\n  componentDidMount() {\n    this.componentLifeCycleEvent('componentDidMount called');\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n  \tif (prevState !== this.state) {\n  \t\tthis.componentLifeCycleEvent('componentDidUpdate called', prevProps.number, prevState);\n  \t}\n  \tif (prevProps.number !== this.props.number) {\n  \t\tconsole.log('theres a difference here');\n  \t\tconsole.log('prevProps:');\n  \t\tconsole.log(prevProps);\n  \t\tconsole.log('this.props');\n  \t\tconsole.log(this.props);\n  \t}\n  }\n\n  componentWillUnmount() {\n    this.props.onCreateMonster(this.state, this.props);\n  }\n\n  render() {\n\treturn (\n\t  <div className='gizmo' id={'gizmoId-' + this.props.number} ref={this.monsterDOMRef} style={{top: this.state.monsterOffsetTop, left: this.state.monsteroffsetLeft}} >\n\t\t<div style={{\n\t\t\tbackgroundColor: this.state.color,\n\t\t\twidth: this.state.width,\n\t\t\tborderRadius: this.state.borderRadius\n\t\t\t}}><span>My ref prop: {this.props.number}</span>\n\t\t</div>\n    </div>\n    //<div className='gizmo-bucket' />\n\n\t\t// <GizmoControls \n\t\t// \tonChangeColor={this.toggleColor}\n\t\t// \tonChangeHeight={this.toggleHeight}\n\t\t// \tonChangeWidth={this.toggleWidth}\n\t\t// \tonChangeCorners={this.toggleCorners}\n  //     onBuildMonster={this.monsterSelected}\n\t\t// />\n\t  \n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}