{"ast":null,"code":"var _jsxFileName = \"/Dan/DansCode/dan-stevens.github.io/src/components/Gizmos/gizmo.js\";\nimport React from 'react';\nimport updateMonitor from './monitor';\nexport class Gizmo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.monsterDOMRef = React.createRef(); // Coordinates in DOM used for animation\n\n    this.state = {\n      preMountEvents: ''\n    }; //this.componentLifeCycleEvent = this.componentLifeCycleEvent.bind(this);\n  } // componentLifeCycleEvent(lifeCycleEvent, prevProps, prevState) {\n  //   //document.getElementById('gizmo-updates-screen').prepend(lifeCycleEvent);\n  //   updateMonitor(lifeCycleEvent);\n  // }\n\n\n  componentWillMount() {// this.setState({\n    // \tpreMountEvents: 'componentWillMount called'\n    // \t});\n    //updateMonitor('componentWillMount called');\n  }\n\n  componentDidMount() {\n    updateMonitor('componentDidMount called');\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    console.log('jere'); // if (prevState !== this.state) {\n\n    updateMonitor('componentDidUpdate called'); //this.componentLifeCycleEvent('componentDidUpdate called', prevProps.number, prevState);\n    // }\n    // if (prevProps.number !== this.props.number) {\n    // }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"gizmo\",\n      id: 'gizmoId',\n      ref: this.monsterDOMRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"wheel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"wheel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Dan/DansCode/dan-stevens.github.io/src/components/Gizmos/gizmo.js"],"names":["React","updateMonitor","Gizmo","Component","constructor","props","monsterDOMRef","createRef","state","preMountEvents","componentWillMount","componentDidMount","componentDidUpdate","prevProps","prevState","console","log","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,WAA1B;AAEA,OAAO,MAAMC,KAAN,SAAoBF,KAAK,CAACG,SAA1B,CAAoC;AACzCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,aAAL,GAAqBN,KAAK,CAACO,SAAN,EAArB,CAFiB,CAEuB;;AACxC,SAAKC,KAAL,GAAa;AACXC,MAAAA,cAAc,EAAE;AADL,KAAb,CAHiB,CAMjB;AACD,GARwC,CAezC;AACA;AACA;AACA;;;AAEAC,EAAAA,kBAAkB,GAAG,CACtB;AACA;AACA;AACG;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClBV,IAAAA,aAAa,CAAC,0BAAD,CAAb;AACD;;AAEDW,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACvCC,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EADuC,CAExC;;AACGf,IAAAA,aAAa,CAAC,2BAAD,CAAb,CAHqC,CAIvC;AACD;AACA;AACA;AACA;;AAEDgB,EAAAA,MAAM,GAAG;AAIV,WACE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAuB,MAAA,EAAE,EAAE,SAA3B;AAAsC,MAAA,GAAG,EAAE,KAAKX,aAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,EAEG;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFH,CADF;AAME;;AAnDwC","sourcesContent":["import React from 'react';\nimport updateMonitor from './monitor';\n\nexport class Gizmo extends React.Component {\n  constructor(props) {\n    super(props);    \n    this.monsterDOMRef = React.createRef(); // Coordinates in DOM used for animation\n    this.state = {     \n      preMountEvents: ''\n    };\n    //this.componentLifeCycleEvent = this.componentLifeCycleEvent.bind(this);\n  }\n\n\n\n\n\n\n  // componentLifeCycleEvent(lifeCycleEvent, prevProps, prevState) {\n  //   //document.getElementById('gizmo-updates-screen').prepend(lifeCycleEvent);\n  //   updateMonitor(lifeCycleEvent);\n  // }\n\n  componentWillMount() {\n\t// this.setState({\n\t// \tpreMountEvents: 'componentWillMount called'\n // \t});\n    //updateMonitor('componentWillMount called');\n  }\n\n  componentDidMount() {\n    updateMonitor('componentDidMount called');\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    console.log('jere');\n  \t// if (prevState !== this.state) {\n      updateMonitor('componentDidUpdate called');\n  \t\t//this.componentLifeCycleEvent('componentDidUpdate called', prevProps.number, prevState);\n  \t// }\n  \t// if (prevProps.number !== this.props.number) {\n  \t// }\n  }  \n\n  render() {\n\n    \n\n\treturn (    \n\t  <div className='gizmo' id={'gizmoId'} ref={this.monsterDOMRef}>\n      <div className='wheel' />\n      <div className='wheel' />\n    </div>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}